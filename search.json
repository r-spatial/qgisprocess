[{"path":"/articles/qgis_expressions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to use QGIS expressions in qgisprocess?","text":"Many QGIS processing algorithms provide possibility use QGIS expressions. algorithm argument expects QGIS expression, typically marked button QGIS processing dialog opens QGIS expression builder (e.g. native:extractbyexpression), directly integrated QGIS expression builder (e.g. native:fieldcalculator). arguments type expression, seen output qgis_get_argument_specs(). Secondly, one can use expressions data-defined overriding. means algorithm argument usually fixed (numeric boolean) value can also take value another field result expression. QGIS processing dialog, arguments ‘data-defined override’ button. example provided DISTANCE argument native:buffer, query acceptable values .","code":"qgis_get_argument_specs(\"native:fieldcalculator\") |> subset(name == \"FORMULA\") #> # A tibble: 1 × 6 #>   name    description qgis_type default_value available_values acceptable_values #>   <chr>   <chr>       <chr>     <list>        <list>           <list>            #> 1 FORMULA Formula     expressi… <NULL>        <NULL>           <chr [1]> qgis_get_argument_specs(\"native:buffer\") |>    subset(name == \"DISTANCE\") |>    dplyr::select(acceptable_values) |>    tidyr::unnest(cols = acceptable_values) |>    knitr::kable()"},{"path":"/articles/qgis_expressions.html","id":"examples-where-the-argument-expects-a-qgis-expression","dir":"Articles","previous_headings":"","what":"Examples where the argument expects a QGIS expression","title":"How to use QGIS expressions in qgisprocess?","text":"example data, use lake polygon set points lake depth attribute. first example, use QGIS expression filter points depth. can simply pass expression string: often, want use QGIS functions expressions, look relationship geometries create new geometries. Let’s calculate distance points lake border, add attribute points. use native:fieldcalculator algorithm. first create lake border: Next, build QGIS expression. Referring INPUT geometry native:fieldcalculator done @geometry variable. Referring lake border geometry expression bit trickier, since requires several QGIS functions. layer can loaded filepath load_layer() function, first () feature selected get_feature_by_id(), geometry feature selected using geometry() function. steps needed distance() function needs geometries work , features, layers filepaths. Use QGIS expression builder look function documentation, consult online QGIS function documentation. Note: load_layer() function available since QGIS 3.30.0! earlier versions, needed refer layer’s name existing QGIS project, refer project path qgis_run_algorithm() special PROJECT_PATH argument. load_layer() approach since QGIS 3.30.0 avoids need QGIS project. Now can run algorithm:","code":"longlake_path <- system.file(\"longlake/longlake.gpkg\", package = \"qgisprocess\") longlake_depth_path <- system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\") nrow(read_sf(longlake_depth_path)) #> [1] 64 qgis_run_algorithm(   \"native:extractbyexpression\",   INPUT = longlake_depth_path,   EXPRESSION = '\"DEPTH_M\" > 1',   .quiet = TRUE ) |>   st_as_sf() #> Using `OUTPUT = qgis_tmp_vector()` #> Using `FAIL_OUTPUT = qgis_tmp_vector()` #> Simple feature collection with 39 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 410242.8 ymin: 5083519 xmax: 411466.8 ymax: 5084691 #> Projected CRS: NAD83 / UTM zone 20N #> # A tibble: 39 × 3 #>    WAYPOINT_I DEPTH_M               geom #>         <dbl>   <dbl>        <POINT [m]> #>  1          8     1.4 (411466.8 5084488) #>  2         12     1.4 (411379.1 5084490) #>  3         17     1.4 (411292.9 5084670) #>  4         19     1.5 (411290.8 5084593) #>  5         20     1.5 (411286.8 5084534) #>  6         24     1.2 (411272.2 5084333) #>  7         25     1.5 (411244.6 5084420) #>  8         27     1.6 (411220.3 5084500) #>  9         29     1.7 (411205.4 5084575) #> 10         36     1.8 (411133.2 5084691) #> # ℹ 29 more rows lake_border_path <- qgis_run_algorithm(   \"native:polygonstolines\",    INPUT = longlake_path,   .quiet = TRUE ) |>    qgis_extract_output(\"OUTPUT\") #> Using `OUTPUT = qgis_tmp_vector()` expr <- glue::glue(\"distance(                      @geometry,                       geometry(                        get_feature_by_id(                          load_layer('{lake_border_path}', 'ogr'),                           1                        )                      )                     )\") qgis_run_algorithm(   \"native:fieldcalculator\",   INPUT = longlake_depth_path,   FIELD_NAME = \"distance\",   FORMULA = expr ) |>    st_as_sf() #> Using `FIELD_TYPE = \"Decimal (double)\"` #> Argument `FIELD_LENGTH` is unspecified (using QGIS default value). #> Argument `FIELD_PRECISION` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> Simple feature collection with 64 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 409967.1 ymin: 5083354 xmax: 411658.7 ymax: 5084777 #> Projected CRS: NAD83 / UTM zone 20N #> # A tibble: 64 × 4 #>    WAYPOINT_I DEPTH_M distance               geom #>         <dbl>   <dbl>    <dbl>        <POINT [m]> #>  1          2     0.8     6.22 (411658.7 5084501) #>  2          3     0.9    38.6  (411630.3 5084560) #>  3          5     0.8    46.7  (411553.4 5084601) #>  4          6     0.8    49.3  (411476.4 5084600) #>  5          8     1.4   100.   (411466.8 5084488) #>  6         10     0.6    25.4  (411466.4 5084410) #>  7         12     1.4   140.   (411379.1 5084490) #>  8         16     0.8    39.4  (411321.2 5084721) #>  9         17     1.4    93.7  (411292.9 5084670) #> 10         19     1.5   150.   (411290.8 5084593) #> # ℹ 54 more rows"},{"path":"/articles/qgis_expressions.html","id":"example-applying-a-data-defined-override","dir":"Articles","previous_headings":"","what":"Example applying a data-defined override","title":"How to use QGIS expressions in qgisprocess?","text":"Suppose want create buffer around points dynamic radius expressed function DEPTH_M, e.g. 10 times depth point. use native:buffer purpose. Note: applying data-defined override qgisprocess possible since QGIS 3.30.0! DISTANCE default expects numeric value, use prefix expression: want pass expression string. Double quotes used QGIS expressions denote fields (attributes), can also omit . Let’s try: 64 points created 64 polygons: Plot result:  just want refer value another attribute, can also use field: prefix instead, without double quotes around attribute name without spaces:","code":"buffer <- qgis_run_algorithm(   \"native:buffer\",   INPUT = longlake_depth_path,   DISTANCE = 'expression: \"DEPTH_M\" * 10',   .quiet = TRUE ) |>    st_as_sf() #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` st_geometry_type(buffer) |> as.character() |> table() #>  #> MULTIPOLYGON  #>           64 par(mar = rep(0.1, 4)) plot(read_sf(lake_border_path) |> st_geometry()) plot(buffer[, \"DEPTH_M\"], add = TRUE) qgis_run_algorithm(   \"native:buffer\",   INPUT = longlake_depth_path,   DISTANCE = \"field:DEPTH_M\" ) |>    st_as_sf()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author. Floris Vanderhaeghe. Author, maintainer. Jan Caha. Author. Antony Barja. Contributor. Robin Lovelace. Contributor. Jakub Nowosad. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D, Vanderhaeghe F, Caha J (2023). qgisprocess: Using QGIS Processing Algorithms R. R package version 0.0.0.9000, https://github.com/r-spatial/qgisprocess.","code":"@Manual{,   title = {qgisprocess: Using QGIS Processing Algorithms from R},   author = {Dewey Dunnington and Floris Vanderhaeghe and Jan Caha},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/r-spatial/qgisprocess}, }"},{"path":"/index.html","id":"qgisprocess","dir":"","previous_headings":"","what":"Using QGIS Processing Algorithms from R","title":"Using QGIS Processing Algorithms from R","text":"goal qgisprocess provide R interface popular open source desktop geographic information system (GIS) program QGIS. package re-implementation functionality provided archived RQGIS package, partially revived RQGIS3 package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Using QGIS Processing Algorithms from R","text":"can install development version GitHub : qgisprocess package wraps qgis_process command-line utility, available QGIS >= 3.14.16, released September 2020. MacOS users install QIGS >= 3.16; download instructions platforms available https://download.qgis.org/. recent version QGIS isn’t available OS, can use one Geocomputation R Docker images QGIS installed. automatic configuration fails (one installation like choose one used qgisprocess), can set options(qgisprocess.path = \"path//qgis_process\"), possibly .Rprofile persist sessions. can run qgis_configure() print gritty details!","code":"# install.packages(\"remotes\") remotes::install_github(\"r-spatial/qgisprocess\") library(qgisprocess) #> Using 'qgis_process' at '/Applications/QGIS.app/Contents/MacOS/bin/qgis_process'. #> Run `qgis_configure()` for details. qgis_configure() #> getOption('qgisprocess.path') was not found. #> Sys.getenv('R_QGISPROCESS_PATH') was not found. #> Trying 'qgis_process' on PATH #> Error in rethrow_call(c_processx_exec, command, c(command, args), stdin, : cannot start processx process 'qgis_process' (system error 2, No such file or directory) @unix/processx.c:604 (processx_exec) #> Found 1 QGIS installation containing 'qgis_process': #>  /Applications/QGIS.app/Contents/MacOS/bin/qgis_process #> Trying command '/Applications/QGIS.app/Contents/MacOS/bin/qgis_process' #> Success!"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Using QGIS Processing Algorithms from R","text":"following example demonstrates buffer algorithm action. passing sf raster objects experimentally supported (well-supported future!).  can read help associated algorithm using qgis_show_help(): may also useful run algorithm QGIS GUI examine console ‘Input parameters’ determine various input values translated string processing arguments:  list available algorithms can found using qgis_algorithms(). using R interactively, may useful use View(qgis_algorithms()) search.","code":"input <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))  result <- qgis_run_algorithm(   \"native:buffer\",   INPUT = input,   DISTANCE = 1,   DISSOLVE = TRUE,   .quiet = TRUE ) #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()`  result #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/var/folders/bq/2rcjstv90nx1_wrt8d3gqw6m0000gn/T//RtmptXCayy/file9b2b462efaa9/file9b2b5212f730.gpkg\"  output_sf <- sf::read_sf(qgis_extract_output(result, \"OUTPUT\")) plot(sf::st_geometry(output_sf)) qgis_show_help(\"native:buffer\") #> Buffer (native:buffer) #>  #> ---------------- #> Description #> ---------------- #> This algorithm computes a buffer area for all the features in an input layer, using a fixed or dynamic distance. #>  #> The segments parameter controls the number of line segments to use to approximate a quarter circle when creating rounded offsets. #>  #> The end cap style parameter controls how line endings are handled in the buffer. #>  #> The join style parameter specifies whether round, miter or beveled joins should be used when offsetting corners in a line. #>  #> The miter limit parameter is only applicable for miter join styles, and controls the maximum distance from the offset curve to use when creating a mitered join. #>  #> ---------------- #> Arguments #> ---------------- #>  #> INPUT: Input layer #>  Argument type:  source #>  Acceptable values: #>      - Path to a vector layer #> DISTANCE: Distance #>  Argument type:  distance #>  Acceptable values: #>      - A numeric value #> SEGMENTS: Segments #>  The segments parameter controls the number of line segments to use to approximate a quarter circle when creating rounded offsets. #>  Argument type:  number #>  Acceptable values: #>      - A numeric value #> END_CAP_STYLE: End cap style #>  Argument type:  enum #>  Available values: #>      - 0: Round #>      - 1: Flat #>      - 2: Square #>  Acceptable values: #>      - Number of selected option, e.g. '1' #>      - Comma separated list of options, e.g. '1,3' #> JOIN_STYLE: Join style #>  Argument type:  enum #>  Available values: #>      - 0: Round #>      - 1: Miter #>      - 2: Bevel #>  Acceptable values: #>      - Number of selected option, e.g. '1' #>      - Comma separated list of options, e.g. '1,3' #> MITER_LIMIT: Miter limit #>  Argument type:  number #>  Acceptable values: #>      - A numeric value #> DISSOLVE: Dissolve result #>  Argument type:  boolean #>  Acceptable values: #>      - 1 for true/yes #>      - 0 for false/no #> OUTPUT: Buffered #>  Argument type:  sink #>  Acceptable values: #>      - Path for new vector layer #>  #> ---------------- #> Outputs #> ---------------- #>  #> OUTPUT: <outputVector> #>  Buffered qgis_algorithms() #> # A tibble: 986 x 5 #>    provider provider_title algorithm         algorithm_id    algorithm_title     #>    <chr>    <chr>          <chr>             <chr>           <chr>               #>  1 3d       QGIS (3D)      3d:tessellate     tessellate      Tessellate          #>  2 gdal     GDAL           gdal:aspect       aspect          Aspect              #>  3 gdal     GDAL           gdal:assignproje… assignprojecti… Assign projection   #>  4 gdal     GDAL           gdal:buffervecto… buffervectors   Buffer vectors      #>  5 gdal     GDAL           gdal:buildvirtua… buildvirtualra… Build virtual rast… #>  6 gdal     GDAL           gdal:buildvirtua… buildvirtualve… Build virtual vect… #>  7 gdal     GDAL           gdal:cliprasterb… cliprasterbyex… Clip raster by ext… #>  8 gdal     GDAL           gdal:cliprasterb… cliprasterbyma… Clip raster by mas… #>  9 gdal     GDAL           gdal:clipvectorb… clipvectorbyex… Clip vector by ext… #> 10 gdal     GDAL           gdal:clipvectorb… clipvectorbypo… Clip vector by mas… #> # … with 976 more rows"},{"path":"/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Using QGIS Processing Algorithms from R","text":"paper original RQGIS package published R Journal discussion options running QGIS R led package pull request QGIS repo led development qgis_process command-line utility","code":""},{"path":"/reference/as_qgis_argument.html","id":null,"dir":"Reference","previous_headings":"","what":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"Calls qgis_run_algorithm() can contain R objects need serialized passed command line. cases (e.g., sf objects), temporary files need written cleaned . as_qgis_argument() qgis_clean_argument() S3 generics provide hooks argument values serialized correctly.","code":""},{"path":"/reference/as_qgis_argument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"","code":"as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_clean_argument(value)"},{"path":"/reference/as_qgis_argument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"x object passed QGIS processing algorithm spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. value result as_qgis_argument() QGIS processing algorithm run. .use_json_input, use_json_input TRUE arguments serialized JSON instead serialized command-line argument.","code":""},{"path":"/reference/has_qgis.html","id":null,"dir":"Reference","previous_headings":"","what":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"has_qgis() checks whether loaded qgisprocess cache populated, means QGIS installation accessible responsive loading package. qgis_has_plugin(), qgis_has_provider() qgis_has_algorithm() check availability one several plugins, processing providers algorithms, respectively. vectorized.","code":""},{"path":"/reference/has_qgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"","code":"has_qgis()  qgis_has_plugin(plugin, query = FALSE, quiet = TRUE)  qgis_has_provider(provider, query = FALSE, quiet = TRUE)  qgis_has_algorithm(algorithm, query = FALSE, quiet = TRUE)"},{"path":"/reference/has_qgis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"plugin plugin name (e.g., \"native\"). Can vector names. query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. provider provider name (e.g., \"native\"). Can vector names. algorithm qualified algorithm name (e.g., \"native:buffer\"). Can vector names.","code":""},{"path":"/reference/has_qgis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"logical, length 1 case has_qgis().","code":""},{"path":"/reference/has_qgis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"plugins implement processing providers supported.","code":""},{"path":[]},{"path":"/reference/qgis_algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"List algorithms, processing providers or plugins — qgis_algorithms","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"Functions return metadata installed enabled algorithms processing providers, installed plugins implement processing providers. See QGIS docs detailed description algorithms provided 'box' QGIS.","code":""},{"path":"/reference/qgis_algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"","code":"qgis_algorithms(query = FALSE, quiet = TRUE)  qgis_providers(query = FALSE, quiet = TRUE)  qgis_plugins(which = \"all\", query = FALSE, quiet = TRUE, ...)"},{"path":"/reference/qgis_algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. String defining plugins select, based status QGIS (enabled disabled). Must one : \"\", \"enabled\", \"disabled\". ... used functions calling function.","code":""},{"path":"/reference/qgis_algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"tibble algorithms, processing providers plugins, metadata.","code":""},{"path":[]},{"path":"/reference/qgis_algorithms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"","code":"if (has_qgis()) qgis_has_algorithm(\"native:filedownloader\") #> [1] TRUE if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_title algorithm                algorithm_id algorithm_title #>    <chr>    <chr>          <chr>                    <chr>        <chr>           #>  1 3d       QGIS (3D)      3d:tessellate            tessellate   Tessellate      #>  2 gdal     GDAL           gdal:aspect              aspect       Aspect          #>  3 gdal     GDAL           gdal:assignprojection    assignproje… Assign project… #>  4 gdal     GDAL           gdal:buffervectors       buffervecto… Buffer vectors  #>  5 gdal     GDAL           gdal:buildvirtualraster  buildvirtua… Build virtual … #>  6 gdal     GDAL           gdal:buildvirtualvector  buildvirtua… Build virtual … #>  7 gdal     GDAL           gdal:cliprasterbyextent  cliprasterb… Clip raster by… #>  8 gdal     GDAL           gdal:cliprasterbymaskla… cliprasterb… Clip raster by… #>  9 gdal     GDAL           gdal:clipvectorbyextent  clipvectorb… Clip vector by… #> 10 gdal     GDAL           gdal:clipvectorbypolygon clipvectorb… Clip vector by… #> # ℹ 339 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, … if (has_qgis()) qgis_has_provider(\"native\") #> [1] TRUE if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242"},{"path":"/reference/qgis_argument_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify QGIS argument types — qgis_argument_spec","title":"Specify QGIS argument types — qgis_argument_spec","text":"Specify QGIS argument types","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"qgis_argument_spec(   algorithm = NA_character_,   name = NA_character_,   description = NA_character_,   qgis_type = NA_character_,   available_values = character(0),   acceptable_values = character(0) )"},{"path":"/reference/qgis_argument_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify QGIS argument types — qgis_argument_spec","text":"algorithm qualified algorithm name (e.g., \"native:buffer\") path QGIS model file. name, description, qgis_type, available_values, acceptable_values Column values arguments denoting argument name, description, acceptable values.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify QGIS argument types — qgis_argument_spec","text":"list() element input argument.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"# These became internal functions! qgisprocess:::qgis_argument_spec() #> $algorithm #> [1] NA #>  #> $name #> [1] NA #>  #> $description #> [1] NA #>  #> $qgis_type #> [1] NA #>  #> $available_values #> character(0) #>  #> $acceptable_values #> character(0) #>  if (has_qgis()) qgisprocess:::qgis_argument_spec_by_name(\"native:filedownloader\", \"URL\") #> $algorithm #> [1] \"native:filedownloader\" #>  #> $name #> [1] \"URL\" #>  #> $description #> [1] \"URL\" #>  #> $qgis_type #> [1] \"string\" #>  #> $default_value #> NULL #>  #> $available_values #> NULL #>  #> $acceptable_values #> [1] \"String value\"                                                                                     #> [2] \"field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field\"                     #> [3] \"expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression\" #>"},{"path":"/reference/qgis_as_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"Convert qgis_result object one elements raster object","code":""},{"path":"/reference/qgis_as_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"","code":"qgis_as_raster(output, ...)  qgis_as_brick(output, ...)  # S3 method for qgis_outputRaster qgis_as_raster(output, ...)  # S3 method for qgis_outputRaster qgis_as_brick(output, ...)  # S3 method for qgis_outputLayer qgis_as_raster(output, ...)  # S3 method for qgis_outputLayer qgis_as_brick(output, ...)  # S3 method for qgis_result qgis_as_raster(output, ...)  # S3 method for qgis_result qgis_as_brick(output, ...)"},{"path":"/reference/qgis_as_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"output result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed raster::raster() raster::brick().","code":""},{"path":"/reference/qgis_as_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"Just use qgis_as_raster() R scripts, use correct method.","code":""},{"path":[]},{"path":"/reference/qgis_as_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"Convert qgis_result object one elements terra object","code":""},{"path":"/reference/qgis_as_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"","code":"qgis_as_terra(output, ...)  # S3 method for qgis_outputRaster qgis_as_terra(output, ...)  # S3 method for qgis_outputLayer qgis_as_terra(output, ...)  # S3 method for qgis_result qgis_as_terra(output, ...)"},{"path":"/reference/qgis_as_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"output result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed terra::rast().","code":""},{"path":"/reference/qgis_as_terra.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"Just use qgis_as_terra() R scripts, use correct method.","code":""},{"path":[]},{"path":"/reference/qgis_clean_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean processing results — qgis_clean_result","title":"Clean processing results — qgis_clean_result","text":"Deletes temporary files defined qgis_result object. may comprise input output files.","code":""},{"path":"/reference/qgis_clean_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean processing results — qgis_clean_result","text":"","code":"qgis_clean_result(x)"},{"path":"/reference/qgis_clean_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean processing results — qgis_clean_result","text":"x object returned qgis_run_algorithm().","code":""},{"path":[]},{"path":"/reference/qgis_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure qgisprocess — qgis_configure","title":"Configure qgisprocess — qgis_configure","text":"Run qgis_configure() bring package configuration line QGIS save configuration persistent cache. See Details section information setting path 'qgis_process' command line tool.","code":""},{"path":"/reference/qgis_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure qgisprocess — qgis_configure","text":"","code":"qgis_configure(quiet = FALSE, use_cached_data = FALSE)"},{"path":"/reference/qgis_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure qgisprocess — qgis_configure","text":"quiet Use FALSE display information, possibly useful debugging. use_cached_data Use cached algorithm list path found configuring qgisprocess last session. saves time loading package.","code":""},{"path":"/reference/qgis_configure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure qgisprocess — qgis_configure","text":"result processx::run().","code":""},{"path":"/reference/qgis_configure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure qgisprocess — qgis_configure","text":"qgisprocess package wapper around 'qgis_process' command line tool distributed QGIS (>=3.14). Several functions use heuristics detect location 'qgis_process' executable. loading package, configuration automatically read cache qgis_configure(use_cached_data = TRUE, quiet = TRUE) order save time. Run qgis_configure(use_cached_data = TRUE) manually get details. Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), qgis_path() qgis_version() inspect cache contents. configuration fails one QGIS installation, can set options(qgisprocess.path = \"path//qgis_process\") R_QGISPROCESS_PATH environment variable (useful CI). Linux 'qgis_process' executable generally available user's PATH, MacOS executable within QGIS*.app/Contents/MacOS/bin folder, Windows executable named qgis_process-qgis.bat qgis_process-qgis-dev.bat located Program Files/QGIS*/bin OSGeo4W(64)/bin.","code":""},{"path":[]},{"path":"/reference/qgis_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure qgisprocess — qgis_configure","text":"","code":"if (has_qgis()) qgis_path() #> [1] \"qgis_process\" if (has_qgis()) qgis_version() #> [1] \"3.30.2-'s-Hertogenbosch\" if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_title algorithm                algorithm_id algorithm_title #>    <chr>    <chr>          <chr>                    <chr>        <chr>           #>  1 3d       QGIS (3D)      3d:tessellate            tessellate   Tessellate      #>  2 gdal     GDAL           gdal:aspect              aspect       Aspect          #>  3 gdal     GDAL           gdal:assignprojection    assignproje… Assign project… #>  4 gdal     GDAL           gdal:buffervectors       buffervecto… Buffer vectors  #>  5 gdal     GDAL           gdal:buildvirtualraster  buildvirtua… Build virtual … #>  6 gdal     GDAL           gdal:buildvirtualvector  buildvirtua… Build virtual … #>  7 gdal     GDAL           gdal:cliprasterbyextent  cliprasterb… Clip raster by… #>  8 gdal     GDAL           gdal:cliprasterbymaskla… cliprasterb… Clip raster by… #>  9 gdal     GDAL           gdal:clipvectorbyextent  clipvectorb… Clip vector by… #> 10 gdal     GDAL           gdal:clipvectorbypolygon clipvectorb… Clip vector by… #> # ℹ 339 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, … if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242 if (has_qgis()) qgis_plugins() #> # A tibble: 3 × 2 #>   name          enabled #>   <chr>         <lgl>   #> 1 grassprovider FALSE   #> 2 otbprovider   FALSE   #> 3 processing    TRUE    qgis_configure(use_cached_data = TRUE) #> Checking configuration in cache file (~/.cache/R-qgisprocess/cache-0.0.0.9000.rds) #> Checking cached QGIS version with version reported by 'qgis_process' ... #> QGIS versions match! (3.30.2-'s-Hertogenbosch) #> Checking cached QGIS plugins (and state) with those reported by 'qgis_process' ... #> QGIS plugins match! (1 processing provider plugin(s) enabled) #>  #> >>> Run `qgis_enable_plugins()` to enable 2 disabled plugin(s) and #>     access their algorithms: grassprovider, otbprovider #>  #> Restoring configuration from '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> QGIS version: 3.30.2-'s-Hertogenbosch #> Using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 3 available processing provider plugins are enabled. #> Having access to 349 algorithms from 4 QGIS processing providers. #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment. qgis_configure() #> getOption('qgisprocess.path') was not found. #> Sys.getenv('R_QGISPROCESS_PATH') was not found. #> Trying 'qgis_process' on PATH... #> Success! #> Now using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #>  #> QGIS version is now set to: 3.30.2-'s-Hertogenbosch #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 3 available processing provider plugins are enabled. #> You now have access to 349 algorithms from 4 QGIS processing providers. #>  #> >>> Run `qgis_enable_plugins()` to enable 2 disabled plugin(s) and #>     access their algorithms: grassprovider, otbprovider #>  #> Saving configuration to '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment."},{"path":"/reference/qgis_detect_windows_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"Discovers existing 'qgis_process' executables system returns filepath. available Windows macOS systems.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"","code":"qgis_detect_windows_paths(drive_letter = strsplit(R.home(), \":\")[[1]][1])  qgis_detect_macos_paths()"},{"path":"/reference/qgis_detect_windows_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"drive_letter drive letter search. default, drive letter R executable.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"character vector possible paths 'qgis_process' executable.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"functions verify whether discovered 'qgis_process' executables successfully run. can run qgis_path(query = TRUE, quiet = FALSE) discover cache first 'qgis_process' list works.","code":""},{"path":[]},{"path":"/reference/qgis_detect_windows_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"","code":"if (qgisprocess:::is_windows()) qgis_detect_windows_paths() if (qgisprocess:::is_macos()) qgis_detect_macos_paths()"},{"path":"/reference/qgis_enable_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable or disable QGIS plugins — qgis_enable_plugins","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"Processing plugins, installed QGIS, can 'enabled' 'disabled' state QGIS. plugin state can controlled R. qgis_enable_plugins() enables plugins qgis_disable_plugins() reverse.","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"","code":"qgis_enable_plugins(names = NULL, quiet = FALSE)  qgis_disable_plugins(names = NULL, quiet = FALSE)"},{"path":"/reference/qgis_enable_plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"names Optional character vector plugin names. quiet Use FALSE display information, possibly useful debugging.","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"cache immediately updated upon enabling disabling plugins R. Run qgis_plugins() list available plugins implement processing providers. installed, removed, enabled disabled plugins QGIS GUI, run qgis_configure() make changes available R. names provided qgis_enable_plugins(), assumed disabled plugins enabled. names provided qgis_disable_plugins(), assumed enabled plugins disabled. Note 'processing' plugin ignored, always available 'qgis_process' (QGIS though).","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"plugins implement processing providers supported. Installing removing plugins supported.","code":""},{"path":[]},{"path":"/reference/qgis_extract_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Access processing output — qgis_extract_output","title":"Access processing output — qgis_extract_output","text":"functions extract one output element result qgis_run_algorithm(), potentially one case qgis_extract_output_by_class(). output element can extracted based name, position printed qgis_result object returned qgis_run_algorithm(), class. qgis_extract_output() alias qgis_extract_output_by_name().","code":""},{"path":"/reference/qgis_extract_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access processing output — qgis_extract_output","text":"","code":"qgis_extract_output_by_name(x, name = \"OUTPUT\", first = TRUE)  qgis_extract_output(x, name = \"OUTPUT\", first = TRUE)  qgis_extract_output_by_position(x, which)  qgis_extract_output_by_class(x, class, single = TRUE)"},{"path":"/reference/qgis_extract_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access processing output — qgis_extract_output","text":"x object returned qgis_run_algorithm(). name name output. first Logical. qgis_extract_output_by_name() fall back first output element default OUTPUT output element available? takes effect name equal OUTPUT output, found. index output. class Character vector classes. least one class must inherited element x element selected. single Logical. Ensures selection single output qgis_extract_output_by_class(). OUTPUT output element taken available condition inherits specified class; otherwise falls back first element inherits specified class.","code":""},{"path":[]},{"path":"/reference/qgis_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a wrapper function that runs one algorithm — qgis_function","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"opposed qgis_run_algorithm(), qgis_function() creates callable function based argument metadata provided qgis_get_argument_specs().","code":""},{"path":"/reference/qgis_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"","code":"qgis_function(algorithm, ...)"},{"path":"/reference/qgis_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"algorithm qualified algorithm name (e.g., \"native:buffer\"). ... Algorithm arguments. values evaluated immediately, call qgis_tmp_file() .","code":""},{"path":"/reference/qgis_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"logic qgis_function() implemented R package qgis. package also provides QGIS documentation processing algorithm corresponding R function documentation.","code":""},{"path":"/reference/qgis_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"","code":"if (has_qgis()) {   qgis_buffer <- qgis_function(\"native:buffer\")   qgis_buffer(     system.file(       \"longlake/longlake_depth.gpkg\",       package = \"qgisprocess\"     ),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a782d339988.gpkg\""},{"path":"/reference/qgis_list_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a compound input argument — qgis_list_input","title":"Prepare a compound input argument — qgis_list_input","text":"algorithm arguments require compound object, consisting several layers elements. functions apply strict validation rules generating object recommended.","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a compound input argument — qgis_list_input","text":"","code":"qgis_list_input(...)  qgis_dict_input(...)"},{"path":"/reference/qgis_list_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a compound input argument — qgis_list_input","text":"... Named values qgis_dict_input() unnamed values qgis_list_input().","code":""},{"path":"/reference/qgis_list_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a compound input argument — qgis_list_input","text":"qgis_list_input(): object class 'qgis_list_input' qgis_dict_input(): object class 'qgis_dict_input'","code":""},{"path":"/reference/qgis_list_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a compound input argument — qgis_list_input","text":"qgis_list_input() generates unnamed list class qgis_list_input. use qgis_list_input() instead list() required compound arguments case -JSON input (see qgis_using_json_input()). Since applies strict validation rules, recommended cases though. qgis_dict_input() generates named list class qgis_dict_input. qgis_dict_input() supported JSON input method applies (see qgis_using_json_input()), can interchanged named list(). can used arguments requiring named lists. Since applies strict validation rules, recommended list().","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a compound input argument — qgis_list_input","text":"","code":"qgis_list_input(1, 2, 3) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_list_input\" qgis_dict_input(a = 1, b = 2, c = 3) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_dict_input\""},{"path":"/reference/qgis_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata about the used 'qgis_process' command — qgis_path","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"qgis_path() returns filepath 'qgis_process' command, qgis_version() returns QGIS version.","code":""},{"path":"/reference/qgis_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"","code":"qgis_path(query = FALSE, quiet = TRUE)  qgis_version(query = FALSE, quiet = TRUE, debug = FALSE)"},{"path":"/reference/qgis_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. debug Logical. TRUE, also output version QGIS, operating system relevant libraries, reported 'qgis_process' command.","code":""},{"path":[]},{"path":"/reference/qgis_result_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Access processing results: extra tools — qgis_result_status","title":"Access processing results: extra tools — qgis_result_status","text":"qgis_result object list , next output elements, also contains elements can useful scripting. Several can extracted convenience functions: exit status process, standard output standard error 'qgis_process', arguments passed 'qgis_process'.","code":""},{"path":"/reference/qgis_result_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access processing results: extra tools — qgis_result_status","text":"","code":"qgis_result_status(x)  qgis_result_stdout(x)  qgis_result_stderr(x)  qgis_result_args(x)"},{"path":"/reference/qgis_result_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access processing results: extra tools — qgis_result_status","text":"x object returned qgis_run_algorithm().","code":""},{"path":[]},{"path":"/reference/qgis_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the 'qgis_process' command directly — qgis_run","title":"Call the 'qgis_process' command directly — qgis_run","text":"qgis_run() offers full access 'qgis_process'. Run cat(qgis_run(\"--help\")$stdout) get command's help.","code":""},{"path":"/reference/qgis_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the 'qgis_process' command directly — qgis_run","text":"","code":"qgis_run(args = character(), ..., env = qgis_env(), path = qgis_path())"},{"path":"/reference/qgis_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the 'qgis_process' command directly — qgis_run","text":"args Command-line arguments ... Passed processx::run(). env list() environment variables. Defaults getOption(\"qgisprocess.env\", list(QT_QPA_PLATFORM = \"offscreen\")). path path 'qgis_process' executable. Defaults qgis_path().","code":""},{"path":"/reference/qgis_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the 'qgis_process' command directly — qgis_run","text":"processx::run() return value, .e. list status, stdout, stderr timeout elements.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"Runs algorithm using 'qgis_process'. See QGIS docs detailed description algorithms provided 'box' QGIS.","code":""},{"path":"/reference/qgis_run_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"","code":"qgis_run_algorithm(   algorithm,   ...,   PROJECT_PATH = NULL,   ELLIPSOID = NULL,   .raw_json_input = NULL,   .quiet = TRUE )"},{"path":"/reference/qgis_run_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"algorithm qualified algorithm name (e.g., \"native:buffer\") path QGIS model file. ... Named key-value pairs arguments algorithm. Features rlang::list2() supported. arguments converted strings using as_qgis_argument(). PROJECT_PATH, ELLIPSOID Global values QGIS project file ellipsoid name distance calculations. .raw_json_input raw JSON use input place .... .quiet Use FALSE get extra output 'qgis_process'. can useful debugging.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"","code":"if (has_qgis()) {   qgis_run_algorithm(     \"native:buffer\",     INPUT = system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\"),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a786c29e5d7.gpkg\""},{"path":"/reference/qgis_run_algorithm_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"qgis_run_algorithm_p() wraps qgis_run_algorithm(), passing first argument first argument QGIS algorithm. makes convenient pipeline (hence '_p' name).","code":""},{"path":"/reference/qgis_run_algorithm_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"","code":"qgis_run_algorithm_p(   .data,   algorithm,   ...,   .select = \"OUTPUT\",   .clean = TRUE,   .quiet = TRUE )"},{"path":"/reference/qgis_run_algorithm_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":".data Passed first input algorithm. .data qgis_result (result previous processing step), .data[[.select]] passed instead. algorithm qualified algorithm name (e.g., \"native:buffer\"). ... algorithm arguments. values evaluated immediately, call qgis_tmp_file() . .select String. name element select .data latter qgis_result. Defaults \"OUTPUT\". .clean Logical. incoming qgis_result cleaned (using qgis_clean_result()) processing? .quiet Use FALSE get extra output 'qgis_process'. can useful debugging.","code":""},{"path":"/reference/qgis_run_algorithm_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"Uses qgis_function() hood.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"","code":"if (has_qgis()) {   system.file(         \"longlake/longlake_depth.gpkg\",         package = \"qgisprocess\"       ) |>     qgis_run_algorithm_p(       \"native:buffer\",       DISTANCE = 10     ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a787afcfa61.gpkg\""},{"path":"/reference/qgis_show_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Get detailed information about one algorithm — qgis_show_help","title":"Get detailed information about one algorithm — qgis_show_help","text":"Get detailed information one algorithm","code":""},{"path":"/reference/qgis_show_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get detailed information about one algorithm — qgis_show_help","text":"","code":"qgis_show_help(algorithm)  qgis_get_description(algorithm)  qgis_get_argument_specs(algorithm)  qgis_get_output_specs(algorithm)"},{"path":"/reference/qgis_show_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get detailed information about one algorithm — qgis_show_help","text":"algorithm qualified algorithm name (e.g., \"native:buffer\").","code":""},{"path":[]},{"path":"/reference/qgis_show_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get detailed information about one algorithm — qgis_show_help","text":"","code":"if (has_qgis()) qgis_show_help(\"native:filedownloader\") #> Download file (native:filedownloader) #>  #> ---------------- #> Description #> ---------------- #> This algorithm downloads a URL on the file system. #>  #> ---------------- #> Arguments #> ---------------- #>  #> URL: URL #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> METHOD: Method #> \tDefault value:\t0 #> \tThe HTTP method to use for the request #> \tArgument type:\tenum #> \tAvailable values: #> \t\t- 0: GET #> \t\t- 1: POST #> \tAcceptable values: #> \t\t- Number of selected option, e.g. '1' #> \t\t- Comma separated list of options, e.g. '1,3' #> DATA: Data (optional) #> \tThe data to add in the body if the request is a POST #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> OUTPUT: File destination (optional) #> \tArgument type:\tfileDestination #> \tAcceptable values: #> \t\t- Path for new file #>  #> ---------------- #> Outputs #> ---------------- #>  #> OUTPUT: <outputFile> #> \tFile destination #>  #>  #>  if (has_qgis()) qgis_get_description(\"native:filedownloader\") #>                                native:filedownloader  #> \"This algorithm downloads a URL on the file system.\"  if (has_qgis()) qgis_get_argument_specs(\"native:filedownloader\") #> # A tibble: 4 × 6 #>   name   description  qgis_type default_value available_values acceptable_values #>   <chr>  <chr>        <chr>     <list>        <list>           <list>            #> 1 URL    URL          string    <NULL>        <NULL>           <chr [3]>         #> 2 METHOD Method       enum      <int [1]>     <chr [2]>        <chr [2]>         #> 3 DATA   Data         string    <NULL>        <NULL>           <chr [3]>         #> 4 OUTPUT File destin… fileDest… <NULL>        <NULL>           <chr [1]>"},{"path":"/reference/qgis_tmp_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage temporary files — qgis_tmp_file","title":"Manage temporary files — qgis_tmp_file","text":"functions create temporary files can used calls qgis_run_algorithm() elsewhere. files created special temporary directory (qgis_tmp_base()) periodically cleaned using qgis_clean_tmp(). can set preferred vector /raster file extension using options(qgisprocess.tmp_vector_ext = \"...\") /options(qgisprocess.tmp_raster_ext = \"...\"), respectively.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_file(ext)  qgis_tmp_folder()  qgis_tmp_vector(ext = getOption(\"qgisprocess.tmp_vector_ext\", \".gpkg\"))  qgis_tmp_raster(ext = getOption(\"qgisprocess.tmp_raster_ext\", \".tif\"))  qgis_tmp_base()  qgis_clean_tmp()"},{"path":"/reference/qgis_tmp_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage temporary files — qgis_tmp_file","text":"ext file extension used.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage temporary files — qgis_tmp_file","text":"character vector indicating location (yet created) temporary file.","code":""},{"path":[]},{"path":"/reference/qgis_tmp_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_base() #> [1] \"/tmp/Rtmp0wB2gY/file2a785d72a4e3\" qgis_tmp_file(\".csv\") #> [1] \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a7841d0bd54.csv\" qgis_tmp_vector() #> [1] \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a78173ee29a.gpkg\" qgis_tmp_raster() #> [1] \"/tmp/Rtmp0wB2gY/file2a785d72a4e3/file2a78160ab02f.tif\""},{"path":"/reference/qgis_unconfigure.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the package cache — qgis_unconfigure","title":"Clean the package cache — qgis_unconfigure","text":"Empties qgisprocess cache environment.","code":""},{"path":"/reference/qgis_unconfigure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the package cache — qgis_unconfigure","text":"","code":"qgis_unconfigure()"},{"path":[]},{"path":"/reference/qgis_using_json_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"Returns logical reveals whether JSON input output methods used, respectively.","code":""},{"path":"/reference/qgis_using_json_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"","code":"qgis_using_json_input()  qgis_using_json_output(query = FALSE, quiet = TRUE)"},{"path":"/reference/qgis_using_json_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging.","code":""},{"path":"/reference/qgis_using_json_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"Since QGIS 3.24 JSON input method 'qgis_process' used default calling command. allows complex input argument types certain algorithms require complex input argument, e.g. list lists (see qgis_list_input()). Likewise, JSON output default output format requested 'qgis_process'. settings can overruled options qgisprocess.use_json_input qgisprocess.use_json_output, environment variables R_QGISPROCESS_USE_JSON_INPUT R_QGISPROCESS_USE_JSON_OUTPUT. Since JSON output method cached package, qgis_using_json_output(query = TRUE) needed settings take effect package loaded already.","code":""},{"path":[]},{"path":"/reference/qgisprocess-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — qgisprocess-deprecated","title":"Deprecated functions — qgisprocess-deprecated","text":"Instead qgis_output(), use qgis_extract_output() related functions. Instead qgis_result_single(), use qgis_extract_output() related functions. Instead qgis_detect_windows(), use qgis_detect_windows_paths(). Instead qgis_detect_macos(), use qgis_detect_macos_paths(). Instead qgis_use_json_input(), use qgis_using_json_input(). Instead qgis_use_json_output(), use qgis_using_json_output(). Instead qgis_description(), use qgis_get_description(). Instead qgis_arguments(), use qgis_get_argument_specs(). Instead qgis_outputs(), use qgis_get_output_specs(). Instead qgis_pipe(), use qgis_run_algorithm_p(). Instead qgis_tmp_clean(), use qgis_clean_tmp(). Instead qgis_result_clean(), use qgis_clean_result().","code":""},{"path":"/reference/qgisprocess-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — qgisprocess-deprecated","text":"","code":"qgis_output(x, which)  qgis_result_single(x, what)  qgis_detect_windows(...)  qgis_detect_macos()  qgis_use_json_input()  qgis_use_json_output(...)  qgis_description(...)  qgis_arguments(...)  qgis_outputs(...)  qgis_pipe(...)  qgis_tmp_clean(...)  qgis_result_clean(...)"},{"path":"/reference/qgisprocess-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — qgisprocess-deprecated","text":"x object returned qgis_run_algorithm(). index output. Character vector classes. ... Arguments passed new function. done functions function name changed time deprecation.","code":""},{"path":"/reference/qgisprocess-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"Provides seamless access QGIS (https://qgis.org/) processing toolbox using 'qgis_process' command-line utility. native third-party (plugin) processing providers supported. Beside referring data sources file, also common R-objects like sf, terra stars objects supported.","code":""},{"path":"/reference/qgisprocess-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"structured overview available functions can consulted https://r-spatial.github.io/qgisprocess/reference/index.html.","code":""},{"path":[]},{"path":"/reference/qgisprocess-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"Maintainer: Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) Authors: Dewey Dunnington dewey@fishandwhistle.net (ORCID) Jan Caha jan.caha@outlook.com (ORCID) contributors: Antony Barja antony.barja8@gmail.com (ORCID) [contributor] Robin Lovelace rob00x@gmail.com (ORCID) [contributor] Jakub Nowosad nowosad.jakub@gmail.com (ORCID) [contributor]","code":""},{"path":"/reference/st_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object to an sf object — st_as_sf","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"Convert qgis_result object sf object","code":""},{"path":"/reference/st_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"","code":"st_as_sf.qgis_result(x, ...)"},{"path":"/reference/st_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"x result qgis_run_algorithm(). ... Arguments passed sf::read_sf().","code":""},{"path":"/reference/st_as_sf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"Just use st_as_sf() R scripts, use correct method.","code":""},{"path":[]},{"path":"/reference/st_as_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"Convert qgis_result object one elements stars object","code":""},{"path":"/reference/st_as_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"","code":"st_as_stars.qgis_outputRaster(.x, ...)  st_as_stars.qgis_outputLayer(.x, ...)  st_as_stars.qgis_result(.x, ...)"},{"path":"/reference/st_as_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":".x result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed stars::read_stars().","code":""},{"path":"/reference/st_as_stars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"Just use st_as_stars() R scripts, use correct method.","code":""},{"path":[]}]
