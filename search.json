[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/qgis_expressions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to use QGIS expressions in qgisprocess?","text":"Many QGIS processing algorithms provide possibility use QGIS expressions. algorithm argument expects QGIS expression, typically marked button QGIS processing dialog opens QGIS expression builder (e.g. native:extractbyexpression), directly integrated QGIS expression builder (e.g. native:fieldcalculator). arguments type expression, seen output qgis_get_argument_specs(). Secondly, one can use expressions data-defined overriding. means algorithm argument usually fixed value (number, distance, boolean, string color) can also take value another field result expression. QGIS processing dialog, arguments ‘data-defined override’ button. example provided DISTANCE argument native:buffer, query acceptable values .","code":"qgis_get_argument_specs(\"native:fieldcalculator\") |> subset(name == \"FORMULA\") #> # A tibble: 1 × 6 #>   name    description qgis_type default_value available_values acceptable_values #>   <chr>   <chr>       <chr>     <list>        <list>           <list>            #> 1 FORMULA Formula     expressi… <NULL>        <NULL>           <chr [1]> qgis_get_argument_specs(\"native:buffer\") |>    subset(name == \"DISTANCE\") |>    dplyr::select(acceptable_values) |>    tidyr::unnest(cols = acceptable_values) |>    knitr::kable()"},{"path":"/articles/qgis_expressions.html","id":"examples-where-the-argument-expects-a-qgis-expression","dir":"Articles","previous_headings":"","what":"Examples where the argument expects a QGIS expression","title":"How to use QGIS expressions in qgisprocess?","text":"example data, use lake polygon set points lake depth attribute. first example, use QGIS expression filter points depth. can simply pass expression string: often, want use QGIS functions expressions, look relationship geometries create new geometries. Let’s calculate distance points lake border, add attribute points. use native:fieldcalculator algorithm. first create lake border: Next, build QGIS expression. Referring INPUT geometry native:fieldcalculator done @geometry variable. Referring lake border geometry expression bit trickier, since requires several QGIS functions. layer can loaded filepath load_layer() function, first () feature selected get_feature_by_id(), geometry feature selected using geometry() function. steps needed distance() function needs geometries work , features, layers filepaths. Use QGIS expression builder look function documentation, consult online QGIS function documentation. Note: load_layer() function available since QGIS 3.30.0! earlier versions, needed refer layer’s name existing QGIS project, refer project path qgis_run_algorithm() special PROJECT_PATH argument. load_layer() approach since QGIS 3.30.0 avoids need QGIS project. Now can run algorithm:","code":"longlake_path <- system.file(\"longlake/longlake.gpkg\", package = \"qgisprocess\") longlake_depth_path <- system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\") nrow(read_sf(longlake_depth_path)) #> [1] 64 qgis_run_algorithm(   \"native:extractbyexpression\",   INPUT = longlake_depth_path,   EXPRESSION = '\"DEPTH_M\" > 1' ) |>   st_as_sf() #> Using `OUTPUT = qgis_tmp_vector()` #> Using `FAIL_OUTPUT = qgis_tmp_vector()` #> Simple feature collection with 39 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 410242.8 ymin: 5083519 xmax: 411466.8 ymax: 5084691 #> Projected CRS: NAD83 / UTM zone 20N #> # A tibble: 39 × 3 #>    WAYPOINT_I DEPTH_M               geom #>         <dbl>   <dbl>        <POINT [m]> #>  1          8     1.4 (411466.8 5084488) #>  2         12     1.4 (411379.1 5084490) #>  3         17     1.4 (411292.9 5084670) #>  4         19     1.5 (411290.8 5084593) #>  5         20     1.5 (411286.8 5084534) #>  6         24     1.2 (411272.2 5084333) #>  7         25     1.5 (411244.6 5084420) #>  8         27     1.6 (411220.3 5084500) #>  9         29     1.7 (411205.4 5084575) #> 10         36     1.8 (411133.2 5084691) #> # ℹ 29 more rows lake_border_path <- qgis_run_algorithm(   \"native:polygonstolines\",    INPUT = longlake_path ) |>    qgis_extract_output(\"OUTPUT\") #> Using `OUTPUT = qgis_tmp_vector()` expr <- glue::glue(\"distance(                      @geometry,                       geometry(                        get_feature_by_id(                          load_layer('{lake_border_path}', 'ogr'),                           1                        )                      )                     )\") qgis_run_algorithm(   \"native:fieldcalculator\",   INPUT = longlake_depth_path,   FIELD_NAME = \"distance\",   FORMULA = expr ) |>    st_as_sf() #> Using `FIELD_TYPE = \"Decimal (double)\"` #> Argument `FIELD_LENGTH` is unspecified (using QGIS default value). #> Argument `FIELD_PRECISION` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> Simple feature collection with 64 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 409967.1 ymin: 5083354 xmax: 411658.7 ymax: 5084777 #> Projected CRS: NAD83 / UTM zone 20N #> # A tibble: 64 × 4 #>    WAYPOINT_I DEPTH_M distance               geom #>         <dbl>   <dbl>    <dbl>        <POINT [m]> #>  1          2     0.8     6.22 (411658.7 5084501) #>  2          3     0.9    38.6  (411630.3 5084560) #>  3          5     0.8    46.7  (411553.4 5084601) #>  4          6     0.8    49.3  (411476.4 5084600) #>  5          8     1.4   100.   (411466.8 5084488) #>  6         10     0.6    25.4  (411466.4 5084410) #>  7         12     1.4   140.   (411379.1 5084490) #>  8         16     0.8    39.4  (411321.2 5084721) #>  9         17     1.4    93.7  (411292.9 5084670) #> 10         19     1.5   150.   (411290.8 5084593) #> # ℹ 54 more rows"},{"path":"/articles/qgis_expressions.html","id":"example-applying-a-data-defined-override","dir":"Articles","previous_headings":"","what":"Example applying a data-defined override","title":"How to use QGIS expressions in qgisprocess?","text":"Suppose want create buffer around points dynamic radius expressed function DEPTH_M, e.g. 10 times depth point. use native:buffer purpose. Note: applying data-defined override qgisprocess possible since QGIS 3.30.0! DISTANCE default expects numeric value, use prefix expression: want pass expression string. Double quotes used QGIS expressions denote fields (attributes), can also omit . Let’s try: 64 points created 64 polygons: Plot result:  just want refer value another attribute, can also use field: prefix instead, without double quotes around attribute name without spaces:","code":"buffer <- qgis_run_algorithm(   \"native:buffer\",   INPUT = longlake_depth_path,   DISTANCE = 'expression: \"DEPTH_M\" * 10' ) |>    st_as_sf() #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` st_geometry_type(buffer) |> as.character() |> table() #>  #> MULTIPOLYGON  #>           64 par(mar = rep(0.1, 4)) plot(read_sf(lake_border_path) |> st_geometry()) plot(buffer[, \"DEPTH_M\"], add = TRUE) qgis_run_algorithm(   \"native:buffer\",   INPUT = longlake_depth_path,   DISTANCE = \"field:DEPTH_M\" ) |>    st_as_sf()"},{"path":"/articles/qgisprocess.html","id":"setting-up-the-system","dir":"Articles","previous_headings":"","what":"Setting up the system","title":"Getting started with qgisprocess","text":"qgisprocess basically wrapper around standalone command line tool qgis_process. Therefore, need installed QGIS system well third-party providers GRASS SAGA access run geoalgorithms provided qgis_process within R. package meant support current QGIS releases, .e. latest long-term release. Although older QGIS releases officially supported, qgisprocess might work QGIS versions >=3.16. Download instructions platforms available https://download.qgis.org/. facilitate using qgisprocess, created docker image already comes needed software packages. can pull Github’s container registry running: detailed introduction get started docker, please refer https://github.com/geocompx/docker.","code":"docker pull ghcr.io/geocompx/docker:qgis"},{"path":"/articles/qgisprocess.html","id":"package-configuration","dir":"Articles","previous_headings":"","what":"Package configuration","title":"Getting started with qgisprocess","text":"Since qgisprocess depends command line tool qgis_process, already tries detect qgis_process system loaded, complains find . loading qgisprocess first time, cache among others path qgis_process, QGIS version list known algorithms. loading qgisprocess later R sessions, cache file read instead speed-, condition still valid. Therefore, usually don’t configuration , unless ’s message telling . interested details process, e.g. qgisprocess detected qgis_process, run qgis_configure(use_cached_data = TRUE). needed cache rebuilt automatically upon loading package. case QGIS version location qgis_process command-line utility changed, user-settings (e.g. option qgisprocess.path) altered changed state processing provider plugins (enabled vs. disabled) detected. Rebuilding cache can triggered manually running qgis_configure() (default use_cached_data = FALSE). determine location qgis_process, qgis_configure() first checks R option qgisprocess.path global environment variable R_QGISPROCESS_PATH set. already indicates can specify one settings case qgis_process installed one common locations multiple QGIS versions available. case, set options(qgisprocess.path = '/path//qgis_process') set environment variable (e.g. .Renviron) run qgis_configure(). Windows make sure indicate path qgis_process-qgis.bat file, e.g., Assuming package loading qgis_configure() ran successfully, can check QGIS version system running (takes cache): Next, let’s check plugins disposal: Since use GRASS SAGA later , let’s enable (course, implies already installed GRASS SAGA version > 7 system): Now, let’s list available providers including available third-party applications: tells us can also use third-party providers GDAL, GRASS SAGA QGIS interface.","code":"library(\"qgisprocess\") #> QGIS version: 3.30.3-'s-Hertogenbosch #> Having access to 349 algorithms from 4 QGIS processing providers. #> Run `qgis_configure(use_cached_data = TRUE)` to reload cache and get more details. #> >>> Run `qgis_enable_plugins()` to enable 3 disabled plugins and access #>     their algorithms: grassprovider, otbprovider, #>     processing_saga_nextgen qgis_configure(use_cached_data = TRUE) #> Checking configuration in cache file (~/.cache/R-qgisprocess/cache-0.0.0.9000.rds) #> Checking cached QGIS version with version reported by 'qgis_process' ... #> QGIS versions match! (3.30.3-'s-Hertogenbosch) #> Checking cached QGIS plugins (and state) with those reported by 'qgis_process' ... #> QGIS plugins match! (1 processing provider plugin(s) enabled) #>  #> >>> Run `qgis_enable_plugins()` to enable 3 disabled plugins and access #>     their algorithms: grassprovider, otbprovider, #>     processing_saga_nextgen #>  #> Restoring configuration from '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> QGIS version: 3.30.3-'s-Hertogenbosch #> Using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 4 available processing provider plugins are enabled. #> Having access to 349 algorithms from 4 QGIS processing providers. #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment. # specify path to QGIS installation on Windows  options(qgisprocess.path = \"C:/Program Files/QGIS 3.28/bin/qgis_process-qgis.bat\") # or use the QGIS nightly version (if installed via OSGeo4W) # options(qgisprocess.path = \"C:/OSGeo4W64/bin/qgis_process-qgis-dev.bat\") qgis_configure() # or use library(qgisprocess) if package was not loaded yet qgis_version() #> [1] \"3.30.3-'s-Hertogenbosch\" qgis_plugins() #> # A tibble: 4 × 2 #>   name                    enabled #>   <chr>                   <lgl>   #> 1 grassprovider           FALSE   #> 2 otbprovider             FALSE   #> 3 processing              TRUE    #> 4 processing_saga_nextgen FALSE qgis_enable_plugins(c(\"grassprovider\", \"processing_saga_nextgen\")) qgis_providers() #> # A tibble: 6 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 grass7   GRASS                         304 #> 3 qgis     QGIS                           50 #> 4 3d       QGIS (3D)                       1 #> 5 native   QGIS (native c++)             242 #> 6 sagang   SAGA Next Gen                 509"},{"path":[]},{"path":"/articles/qgisprocess.html","id":"first-example","dir":"Articles","previous_headings":"Basic usage","what":"First example","title":"Getting started with qgisprocess","text":"find available (cached) geoalgorithms, run: Since also installed GRASS SAGA, nearly 1000 geoalgorithms disposal. find specific geoalgorithm description arguments, use qgis_show_help(), e.g.: find arguments specific geoalgorithm, run: finally run qgis_run_algorithm(): convenience user, qgis_run_algorithm() reports unspecified automatically chosen arguments. want even information going background, set .quiet FALSE. result object class qgis_result contains path output file created qgis_process (explicitly setting output filepath, qgisprocess creates automatically ). output filepath can extracted qgis_extract_output(). qgis_result objects type list , aside geoprocessing result, also contain debugging information used algorithm, input arguments messages processing step. See ?qgis_result_status various convenience functions extract information easily qgis_result objects. QGIS 3.24 later, qgis_run_algorithm() passes input arguments QGIS JSON string. JSON input string also included qgis_result objects. Moreover, user can specify input arguments directly JSON qgis_run_algorithm(). useful since input parameters can copied QGIS GUI JSON. demonstrated separate tutorial. read QGIS output visualize , can run: can convert qgis-algorithm R function qgis_function(). using buffer example , also run: basically package qgis available QGIS function also providing R help file function. Hence, prefer running QGIS callable R functions, check .","code":"algs <- qgis_algorithms() algs #> # A tibble: 1,162 × 24 #>    provider provider_title algorithm                algorithm_id algorithm_title #>    <chr>    <chr>          <chr>                    <chr>        <chr>           #>  1 3d       QGIS (3D)      3d:tessellate            tessellate   Tessellate      #>  2 gdal     GDAL           gdal:aspect              aspect       Aspect          #>  3 gdal     GDAL           gdal:assignprojection    assignproje… Assign project… #>  4 gdal     GDAL           gdal:buffervectors       buffervecto… Buffer vectors  #>  5 gdal     GDAL           gdal:buildvirtualraster  buildvirtua… Build virtual … #>  6 gdal     GDAL           gdal:buildvirtualvector  buildvirtua… Build virtual … #>  7 gdal     GDAL           gdal:cliprasterbyextent  cliprasterb… Clip raster by… #>  8 gdal     GDAL           gdal:cliprasterbymaskla… cliprasterb… Clip raster by… #>  9 gdal     GDAL           gdal:clipvectorbyextent  clipvectorb… Clip vector by… #> 10 gdal     GDAL           gdal:clipvectorbypolygon clipvectorb… Clip vector by… #> # ℹ 1,152 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, … qgis_show_help(\"native:buffer\") ## Buffer (native:buffer) ##  ## ---------------- ## Description ## ---------------- ## This algorithm computes a buffer area for all the features in an input layer, using a fixed or dynamic distance. ##  ## The segments parameter controls the number of line segments to use to approximate a quarter circle when creating rounded offsets. ##  ##... qgis_get_argument_specs(\"native:buffer\") #> # A tibble: 8 × 6 #>   name    description qgis_type default_value available_values acceptable_values #>   <chr>   <chr>       <chr>     <list>        <list>           <list>            #> 1 INPUT   Input layer source    <NULL>        <NULL>           <chr [1]>         #> 2 DISTAN… Distance    distance  <int [1]>     <NULL>           <chr [3]>         #> 3 SEGMEN… Segments    number    <int [1]>     <NULL>           <chr [3]>         #> 4 END_CA… End cap st… enum      <int [1]>     <chr [3]>        <chr [2]>         #> 5 JOIN_S… Join style  enum      <int [1]>     <chr [3]>        <chr [2]>         #> 6 MITER_… Miter limit number    <int [1]>     <NULL>           <chr [3]>         #> 7 DISSOL… Dissolve r… boolean   <lgl [1]>     <NULL>           <chr [4]>         #> 8 OUTPUT  Buffered    sink      <NULL>        <NULL>           <chr [1]> # if needed, first install spDataLarge: # remotes::install_github(\"Nowosad/spDataLarge\") data(\"random_points\", package = \"spDataLarge\") result <- qgis_run_algorithm(\"native:buffer\", INPUT = random_points, DISTANCE = 50) #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` # inspect the result object class(result) #> [1] \"qgis_result\" names(result) #> [1] \"OUTPUT\"           \".algorithm\"       \".args\"            \".raw_json_input\"  #> [5] \".processx_result\" result # only prints the output element(s) #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef6bf7d312.gpkg\" library(\"sf\") library(\"mapview\") # attach QGIS output # either do it \"manually\": buf <- read_sf(qgis_extract_output(result, \"OUTPUT\")) # or use the st_as_sf.qgis_result method: buf <- sf::st_as_sf(result) # plot your result mapview(buf, col.regions = \"blue\") +    mapview(random_points, col.regions = \"red\", cex = 3) # create a function qgis_buffer <- qgis_function(\"native:buffer\") # run the function result <- qgis_buffer(INPUT = random_points, DISTANCE = 50)"},{"path":"/articles/qgisprocess.html","id":"second-example","dir":"Articles","previous_headings":"Basic usage","what":"Second example","title":"Getting started with qgisprocess","text":"second example, let’s look raster processing running GRASS background. compute various terrain attributes digital elevation model, can use grass7:r.slope.aspect. qgis_get_description() (also included qgis_show_help()) gives us general description algorithm. can find arguments help qgis_get_argument_specs(). qgis_get_output_specs() shows different outputs calculated: Now let us calculate terrain attributes. Just printing info object shows output files made: Combine output rasters multi-layered SpatRaster object plot :  alternative way combine rasters given . Since now many terrain attributes disposal, let us take opportunity add values points laying top help SAGA function sagang:addrastervaluestopoints. GRIDS argument type multilayer. pass multiple layers one argument, can either repeat corresponding argument often needed … … can pass needed layers one list. One use list() command recommendended use qgis_list_input() function robust, therefore also support non-JSON-input configurations (e.g. QGIS < 3.24). verify worked, read output.","code":"qgis_get_description(\"grass7:r.slope.aspect\") #>                                                                                         grass7:r.slope.aspect  #> \"Generates raster layers of slope, aspect, curvatures and partial derivatives from a elevation raster layer.\" qgis_get_argument_specs(\"grass7:r.slope.aspect\") #> # A tibble: 21 × 6 #>    name   description qgis_type default_value available_values acceptable_values #>    <chr>  <chr>       <chr>     <list>        <list>           <list>            #>  1 eleva… Elevation   raster    <NULL>        <NULL>           <chr [1]>         #>  2 format Format for… enum      <int [1]>     <chr [2]>        <chr [2]>         #>  3 preci… Type of ou… enum      <int [1]>     <chr [3]>        <chr [2]>         #>  4 -a     Do not ali… boolean   <lgl [1]>     <NULL>           <chr [4]>         #>  5 -e     Compute ou… boolean   <lgl [1]>     <NULL>           <chr [4]>         #>  6 -n     Create asp… boolean   <lgl [1]>     <NULL>           <chr [4]>         #>  7 zscale Multiplica… number    <dbl [1]>     <NULL>           <chr [3]>         #>  8 min_s… Minimum sl… number    <dbl [1]>     <NULL>           <chr [3]>         #>  9 slope  Slope       rasterDe… <NULL>        <NULL>           <chr [1]>         #> 10 aspect Aspect      rasterDe… <NULL>        <NULL>           <chr [1]>         #> # ℹ 11 more rows qgis_get_output_specs(\"grass7:r.slope.aspect\") #> # A tibble: 9 × 3 #>   name       description                                   qgis_output_type #>   <chr>      <chr>                                         <chr>            #> 1 aspect     Aspect                                        outputRaster     #> 2 dx         First order partial derivative dx (E-W slope) outputRaster     #> 3 dxx        Second order partial derivative dxx           outputRaster     #> 4 dxy        Second order partial derivative dxy           outputRaster     #> 5 dy         First order partial derivative dy (N-S slope) outputRaster     #> 6 dyy        Second order partial derivative dyy           outputRaster     #> 7 pcurvature Profile curvature                             outputRaster     #> 8 slope      Slope                                         outputRaster     #> 9 tcurvature Tangential curvature                          outputRaster library(\"terra\") # attach digital elevation model from Mt. Mongón (Peru) dem <- rast(system.file(\"raster/dem.tif\", package = \"spDataLarge\")) # if not already done, enable the grass plugin # qgis_enable_plugins(\"grassprovider\") info <- qgis_run_algorithm(alg = \"grass7:r.slope.aspect\", elevation = dem) info #> <Result of `qgis_run_algorithm(\"grass7:r.slope.aspect\", ...)`> #> List of 9 #>  $ aspect    : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef18ceb10d.tif\" #>  $ dx        : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef1f0022b3.tif\" #>  $ dxx       : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef642faaa9.tif\" #>  $ dxy       : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef3eb619d4.tif\" #>  $ dy        : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef6706c176.tif\" #>  $ dyy       : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef503f29ce.tif\" #>  $ pcurvature: 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31efd8caa0a.tif\" #>  $ slope     : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef1fab0eef.tif\" #>  $ tcurvature: 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef37770450.tif\" # just keep the names of output rasters nms <- qgis_get_output_specs(\"grass7:r.slope.aspect\")$name # read in the output rasters  r <- info[nms] |>   unlist() |>   terra::rast() |>   as.numeric() names(r) <- nms # plot the output plot(r) r <- lapply(info[nms], \\(x) as.numeric(qgis_as_terra(x))) |>    rast() qgis_get_argument_specs(\"sagang:addrastervaluestopoints\") #> # A tibble: 4 × 6 #>   name    description qgis_type default_value available_values acceptable_values #>   <chr>   <chr>       <chr>     <list>        <list>           <list>            #> 1 SHAPES  Points      source    <NULL>        <NULL>           <chr [1]>         #> 2 GRIDS   Grids       multilay… <NULL>        <NULL>           <list [0]>        #> 3 RESULT  Result      vectorDe… <NULL>        <NULL>           <chr [1]>         #> 4 RESAMP… Resampling  enum      <int [1]>     <chr [4]>        <chr [2]> rp_tp <- qgis_run_algorithm(   \"sagang:addrastervaluestopoints\",   SHAPES = random_points,   GRIDS = info$aspect[[1]],   GRIDS = info$slope[[1]],   GRIDS = info$tcurvature[[1]],   RESAMPLING = 0) #> Using `RESULT = qgis_tmp_vector()` rp_tp <- qgis_run_algorithm(   \"sagang:addrastervaluestopoints\",   SHAPES = random_points,   GRIDS = qgis_list_input(info$aspect[[1]], info$slope[[1]], info$tcurvature[[1]]),   RESAMPLING = 0) sf::st_as_sf(rp_tp) #> Simple feature collection with 100 features and 5 fields #> Geometry type: POINT #> Dimension:     XYZ #> Bounding box:  xmin: 795551.4 ymin: 8932370 xmax: 797242.3 ymax: 8934800 #> z_range:       zmin: 0 zmax: 0 #> Projected CRS: WGS 84 / UTM zone 17S #> # A tibble: 100 × 6 #>       id  spri file31ef18ceb10d file31ef1fab0eef file31ef37770450 #>    <int> <int>            <dbl>            <dbl>            <dbl> #>  1     1     4            251.              6.80        0.0000292 #>  2     2     4             79.7             4.60       -0.00206   #>  3     3     3            290.              6.35       -0.00129   #>  4     4     2             88.8             7.74        0.00108   #>  5     5     4            341.             15.0        -0.000439  #>  6     6     5            276.             16.0        -0.0000909 #>  7     7     6            272.              9.09       -0.000245  #>  8     8     2            300.              4.62       -0.000846  #>  9     9     3             68.9            13.3        -0.00115   #> 10    10     3            101.             12.6         0.00151   #> # ℹ 90 more rows #> # ℹ 1 more variable: geom <POINT [m]>"},{"path":"/articles/qgisprocess.html","id":"piping","dir":"Articles","previous_headings":"","what":"Piping","title":"Getting started with qgisprocess","text":"qgis_process lend naturally piping first argument name geoalgorithm instead data object. qgis_run_algorithm_p() circumvents accepting .data object first argument, pipes data object first argument geoalgorithm assuming specified geoalgorithm needs data input object first argument. .data qgis_result object, qgis_run_algorithm_p() automatically tries select element named OUTPUT. However, output another name (e.g., DEM_PREPROC example ) multiple output elements choose (e.g., sagang:sagawetnessindex four output rasters, check qgis_outputs(\"sagang:sagawetnessindex\")), can specify wanted output object via .select argument. Please note make sure temporary output raster files, .e., output rasters specifically name , use SAGA’s native raster file format setting qgisprocess.tmp_raster_ext .sdat. Using default raster output format .tif might lead trouble depending installed versions third-party packages (GDAL, SAGA, etc.). piping, qgis_run_algorithm_p() automatically cleans deleting intermediate results. avoids cluttering system running geoalgorithms large spatial data files. turn behavior, set .clean FALSE. course, can also pipe qgis_run_algorithm() manually extracting OUTPUT object redirecting appropriate input argument next processing step. avoids ambiguity allows greater flexibility though might convenient qgis_run_algorithm_p(). example, intermediate results remain disk duration R session, unless manually call qgis_clean_result() result object.","code":"system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\") |>   qgis_run_algorithm_p(\"native:buffer\", DISTANCE = 50) #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef2289bd6a.gpkg\" dem <- system.file(\"raster/dem.tif\", package = \"spDataLarge\") # in case you need to enable the SAGA next generation algorithms, run the following line: # qgis_enable_plugins(\"processing_saga_nextgen\")  options(qgisprocess.tmp_raster_ext = \".sdat\") qgis_run_algorithm(algorithm = \"sagang:sinkremoval\", DEM = dem,                    METHOD = 1) |>   qgis_run_algorithm_p(\"sagang:sagawetnessindex\", .select = \"DEM_PREPROC\") #> Argument `SINKROUTE` is unspecified (using QGIS default value). #> Using `DEM_PREPROC = qgis_tmp_raster()` #> Argument `THRESHOLD` is unspecified (using QGIS default value). #> Argument `THRSHEIGHT` is unspecified (using QGIS default value). #> Argument `WEIGHT` is unspecified (using QGIS default value). #> Using `AREA = qgis_tmp_raster()` #> Using `SLOPE = qgis_tmp_raster()` #> Using `AREA_MOD = qgis_tmp_raster()` #> Using `TWI = qgis_tmp_raster()` #> Argument `SUCTION` is unspecified (using QGIS default value). #> Using `AREA_TYPE = \"[0] total catchment area\"` #> Using `SLOPE_TYPE = \"[0] local slope\"` #> Argument `SLOPE_MIN` is unspecified (using QGIS default value). #> Argument `SLOPE_OFF` is unspecified (using QGIS default value). #> Argument `SLOPE_WEIGHT` is unspecified (using QGIS default value). #> <Result of `qgis_run_algorithm(\"sagang:sagawetnessindex\", ...)`> #> List of 4 #>  $ AREA    : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef5fb62a0e.sdat\" #>  $ AREA_MOD: 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef71f06730.sdat\" #>  $ SLOPE   : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef13a18f9c.sdat\" #>  $ TWI     : 'qgis_outputRaster' chr \"/tmp/RtmpjddD4c/file31ef73de1cda/file31ef4cbf58b1.sdat\" result <- qgis_run_algorithm(algorithm = \"sagang:sinkremoval\", DEM = dem,                           METHOD = 1) |>   _$DEM_PREPROC[1] |>   qgis_run_algorithm(algorithm = \"sagang:sagawetnessindex\",                      DEM = _) #> Argument `SINKROUTE` is unspecified (using QGIS default value). #> Using `DEM_PREPROC = qgis_tmp_raster()` #> Argument `THRESHOLD` is unspecified (using QGIS default value). #> Argument `THRSHEIGHT` is unspecified (using QGIS default value). #> Argument `WEIGHT` is unspecified (using QGIS default value). #> Using `AREA = qgis_tmp_raster()` #> Using `SLOPE = qgis_tmp_raster()` #> Using `AREA_MOD = qgis_tmp_raster()` #> Using `TWI = qgis_tmp_raster()` #> Argument `SUCTION` is unspecified (using QGIS default value). #> Using `AREA_TYPE = \"[0] total catchment area\"` #> Using `SLOPE_TYPE = \"[0] local slope\"` #> Argument `SLOPE_MIN` is unspecified (using QGIS default value). #> Argument `SLOPE_OFF` is unspecified (using QGIS default value). #> Argument `SLOPE_WEIGHT` is unspecified (using QGIS default value).  # or using an anonymous function # result <- qgis_run_algorithm(algorithm = \"sagang:sinkremoval\", DEM = dem,  #                          METHOD = 1) |> #   (\\(x) qgis_run_algorithm(algorithm = \"sagang:sagawetnessindex\", #                            DEM = x$DEM_PREPROC[1])) ()  # set the default output raster format to .tif again options(qgisprocess.tmp_raster_ext = \".tif\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author. Floris Vanderhaeghe. Author, maintainer. Jan Caha. Author. Jannes Muenchow. Author. Antony Barja. Contributor. Robin Lovelace. Contributor. Jakub Nowosad. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D, Vanderhaeghe F, Caha J, Muenchow J (2023). qgisprocess: Using QGIS Processing Algorithms R. R package version 0.0.0.9000, https://github.com/r-spatial/qgisprocess.","code":"@Manual{,   title = {qgisprocess: Using QGIS Processing Algorithms from R},   author = {Dewey Dunnington and Floris Vanderhaeghe and Jan Caha and Jannes Muenchow},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/r-spatial/qgisprocess}, }"},{"path":"/index.html","id":"qgisprocess","dir":"","previous_headings":"","what":"Using QGIS Processing Algorithms from R","title":"Using QGIS Processing Algorithms from R","text":"goal qgisprocess provide R interface popular open source desktop geographic information system (GIS) program QGIS. package re-implementation functionality provided archived RQGIS package, partially revived RQGIS3 package.","code":""},{"path":[]},{"path":"/index.html","id":"qgisprocess-1","dir":"","previous_headings":"Installation","what":"qgisprocess","title":"Using QGIS Processing Algorithms from R","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"r-spatial/qgisprocess\")"},{"path":"/index.html","id":"qgis","dir":"","previous_headings":"Installation","what":"QGIS","title":"Using QGIS Processing Algorithms from R","text":"qgisprocess package wraps standalone qgis_process command-line utility, available QGIS >= 3.16. package meant support current QGIS releases, .e. latest long-term release. Although older QGIS releases officially supported, may work since QGIS 3.16. Download instructions platforms available https://download.qgis.org/. recent version QGIS isn’t available OS, can use Geocomputation R Docker image QGIS installed (docker pull ghcr.io/geocompx/docker:qgis). See vignette ‘getting started’ information.","code":""},{"path":"/index.html","id":"package-configuration","dir":"","previous_headings":"Installation","what":"Package configuration","title":"Using QGIS Processing Algorithms from R","text":"automatic configuration fails (one installation like choose one used qgisprocess), can set options(qgisprocess.path = \"path//qgis_process\"). Specify qgisprocess.path option .Rprofile, make choices persistent sessions. can run qgis_configure() reconfigure, just qgis_configure(use_cached_data = TRUE) see gritty details!","code":"library(qgisprocess) #> Attempting to load the cache ... Success! #> QGIS version: 3.30.2-'s-Hertogenbosch #> Having access to 1949 algorithms from 13 QGIS processing providers. #> Run `qgis_configure(use_cached_data = TRUE)` to reload cache and get more details."},{"path":"/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Using QGIS Processing Algorithms from R","text":"functions start qgis_ prefix, functions can found easily using tab completion. main function qgis_run_algorithm(algorithm = , ...). specifies geoprocessing algorithm called \"provider:algorithm\" formatted identifier, e.g. \"native:convexhull\" \"gdal:hillshade\", passes algorithm arguments R function arguments. Additional functions provided discover available geoprocessing algorithms, retrieve documentation, handle processing results, manage QGIS plugins, . Spatial layers can passed qgis_run_algorithm() file paths also sf, stars, terra raster objects. structured overview functions available https://r-spatial.github.io/qgisprocess/reference/index.html. get started, read ‘getting started’ vignette use cheat sheets! Note R package qgis extends qgisprocess providing separate R function geoprocessing algorithm. addition, makes QGIS algorithm documentation available corresponding R function documentation.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Using QGIS Processing Algorithms from R","text":"following example demonstrates buffer algorithm action.  can read help associated algorithm using qgis_show_help(). may also useful run algorithm QGIS GUI examine console ‘Input parameters’ determine various input values translated string processing arguments:  list available algorithms can found using qgis_algorithms(). using R interactively, may useful use View(qgis_algorithms()) search.","code":"input <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))  result <- qgis_run_algorithm(   \"native:buffer\",   INPUT = input,   DISTANCE = 1,   DISSOLVE = TRUE ) #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()`  result #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpsCZuzJ/file7d1b75a4d4eb/file7d1b1ab3935f.gpkg\"  output_sf <- sf::st_as_sf(result) plot(sf::st_geometry(output_sf)) qgis_show_help(\"native:buffer\") qgis_algorithms() #> # A tibble: 1,949 × 24 #>    provider         provider_title    algorithm     algorithm_id algorithm_title #>    <chr>            <chr>             <chr>         <chr>        <chr>           #>  1 3d               QGIS (3D)         3d:tessellate tessellate   Tessellate      #>  2 cartographytools Cartography tools cartographyt… averagelines Average linest… #>  3 cartographytools Cartography tools cartographyt… collapsedua… Collapse dual … #>  4 cartographytools Cartography tools cartographyt… removecross… Remove cross r… #>  5 cartographytools Cartography tools cartographyt… removeculde… Remove cul-de-… #>  6 cartographytools Cartography tools cartographyt… removeround… Remove roundab… #>  7 gdal             GDAL              gdal:aspect   aspect       Aspect          #>  8 gdal             GDAL              gdal:assignp… assignproje… Assign project… #>  9 gdal             GDAL              gdal:bufferv… buffervecto… Buffer vectors  #> 10 gdal             GDAL              gdal:buildvi… buildvirtua… Build virtual … #> # ℹ 1,939 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, …"},{"path":"/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Using QGIS Processing Algorithms from R","text":"paper original RQGIS package published R Journal discussion options running QGIS R led package pull request QGIS repo led development qgis_process command-line utility","code":""},{"path":"/reference/as_qgis_argument.html","id":null,"dir":"Reference","previous_headings":"","what":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"Calls qgis_run_algorithm() can contain R objects need serialized passed command line. cases (e.g., sf objects), temporary files need written cleaned . as_qgis_argument() qgis_clean_argument() S3 generics provide hooks argument values serialized correctly.","code":""},{"path":"/reference/as_qgis_argument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"","code":"as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_clean_argument(value)"},{"path":"/reference/as_qgis_argument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type coercion for arguments to QGIS processing algorithms — as_qgis_argument","text":"x object passed QGIS processing algorithm spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. value result as_qgis_argument() QGIS processing algorithm run. .use_json_input, use_json_input TRUE arguments serialized JSON instead serialized command-line argument.","code":""},{"path":"/reference/has_qgis.html","id":null,"dir":"Reference","previous_headings":"","what":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"has_qgis() checks whether loaded qgisprocess cache populated, means QGIS installation accessible responsive loading package. qgis_has_plugin(), qgis_has_provider() qgis_has_algorithm() check availability one several plugins, processing providers algorithms, respectively. vectorized.","code":""},{"path":"/reference/has_qgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"","code":"has_qgis()  qgis_has_plugin(plugin, query = FALSE, quiet = TRUE)  qgis_has_provider(provider, query = FALSE, quiet = TRUE)  qgis_has_algorithm(algorithm, query = FALSE, quiet = TRUE)"},{"path":"/reference/has_qgis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"plugin plugin name (e.g., \"native\"). Can vector names. query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. provider provider name (e.g., \"native\"). Can vector names. algorithm qualified algorithm name (e.g., \"native:buffer\"). Can vector names.","code":""},{"path":"/reference/has_qgis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"logical, length 1 case has_qgis().","code":""},{"path":"/reference/has_qgis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check availability of QGIS, a plugin, a provider or an algorithm — has_qgis","text":"plugins implement processing providers supported.","code":""},{"path":[]},{"path":"/reference/qgis_algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"List algorithms, processing providers or plugins — qgis_algorithms","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"Functions return metadata installed enabled algorithms processing providers, installed plugins implement processing providers. See QGIS docs detailed description algorithms provided 'box' QGIS.","code":""},{"path":"/reference/qgis_algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"","code":"qgis_algorithms(query = FALSE, quiet = TRUE)  qgis_providers(query = FALSE, quiet = TRUE)  qgis_plugins(which = \"all\", query = FALSE, quiet = TRUE, ...)"},{"path":"/reference/qgis_algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. String defining plugins select, based status QGIS (enabled disabled). Must one : \"\", \"enabled\", \"disabled\". ... used functions calling function.","code":""},{"path":"/reference/qgis_algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"tibble algorithms, processing providers plugins, metadata.","code":""},{"path":[]},{"path":"/reference/qgis_algorithms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List algorithms, processing providers or plugins — qgis_algorithms","text":"","code":"if (has_qgis()) qgis_has_algorithm(\"native:filedownloader\") #> [1] TRUE if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_title algorithm                algorithm_id algorithm_title #>    <chr>    <chr>          <chr>                    <chr>        <chr>           #>  1 3d       QGIS (3D)      3d:tessellate            tessellate   Tessellate      #>  2 gdal     GDAL           gdal:aspect              aspect       Aspect          #>  3 gdal     GDAL           gdal:assignprojection    assignproje… Assign project… #>  4 gdal     GDAL           gdal:buffervectors       buffervecto… Buffer vectors  #>  5 gdal     GDAL           gdal:buildvirtualraster  buildvirtua… Build virtual … #>  6 gdal     GDAL           gdal:buildvirtualvector  buildvirtua… Build virtual … #>  7 gdal     GDAL           gdal:cliprasterbyextent  cliprasterb… Clip raster by… #>  8 gdal     GDAL           gdal:cliprasterbymaskla… cliprasterb… Clip raster by… #>  9 gdal     GDAL           gdal:clipvectorbyextent  clipvectorb… Clip vector by… #> 10 gdal     GDAL           gdal:clipvectorbypolygon clipvectorb… Clip vector by… #> # ℹ 339 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, … if (has_qgis()) qgis_has_provider(\"native\") #> [1] TRUE if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242"},{"path":"/reference/qgis_argument_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify QGIS argument types — qgis_argument_spec","title":"Specify QGIS argument types — qgis_argument_spec","text":"Specify QGIS argument types","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"qgis_argument_spec(   algorithm = NA_character_,   name = NA_character_,   description = NA_character_,   qgis_type = NA_character_,   available_values = character(0),   acceptable_values = character(0) )"},{"path":"/reference/qgis_argument_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify QGIS argument types — qgis_argument_spec","text":"algorithm qualified algorithm name (e.g., \"native:buffer\") path QGIS model file. name, description, qgis_type, available_values, acceptable_values Column values arguments denoting argument name, description, acceptable values.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify QGIS argument types — qgis_argument_spec","text":"list() element input argument.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"# These became internal functions! qgisprocess:::qgis_argument_spec() #> $algorithm #> [1] NA #>  #> $name #> [1] NA #>  #> $description #> [1] NA #>  #> $qgis_type #> [1] NA #>  #> $available_values #> character(0) #>  #> $acceptable_values #> character(0) #>  if (has_qgis()) qgisprocess:::qgis_argument_spec_by_name(\"native:filedownloader\", \"URL\") #> $algorithm #> [1] \"native:filedownloader\" #>  #> $name #> [1] \"URL\" #>  #> $description #> [1] \"URL\" #>  #> $qgis_type #> [1] \"string\" #>  #> $default_value #> NULL #>  #> $available_values #> NULL #>  #> $acceptable_values #> [1] \"String value\"                                                                                     #> [2] \"field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field\"                     #> [3] \"expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression\" #>"},{"path":"/reference/qgis_as_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"Convert qgis_result object one elements raster object","code":""},{"path":"/reference/qgis_as_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"","code":"qgis_as_raster(output, ...)  qgis_as_brick(output, ...)  # S3 method for qgis_outputRaster qgis_as_raster(output, ...)  # S3 method for qgis_outputRaster qgis_as_brick(output, ...)  # S3 method for qgis_outputLayer qgis_as_raster(output, ...)  # S3 method for qgis_outputLayer qgis_as_brick(output, ...)  # S3 method for qgis_result qgis_as_raster(output, ...)  # S3 method for qgis_result qgis_as_brick(output, ...)"},{"path":"/reference/qgis_as_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"output result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed raster::raster() raster::brick().","code":""},{"path":"/reference/qgis_as_raster.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a raster object — qgis_as_raster","text":"Just use qgis_as_raster() qgis_as_brick() R scripts; use correct method.","code":""},{"path":[]},{"path":"/reference/qgis_as_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"Convert qgis_result object one elements terra object","code":""},{"path":"/reference/qgis_as_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"","code":"qgis_as_terra(output, ...)  # S3 method for qgis_outputRaster qgis_as_terra(output, ...)  # S3 method for qgis_outputLayer qgis_as_terra(output, ...)  # S3 method for qgis_result qgis_as_terra(output, ...)"},{"path":"/reference/qgis_as_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"output result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed terra::rast().","code":""},{"path":"/reference/qgis_as_terra.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a terra object — qgis_as_terra","text":"Just use qgis_as_terra() R scripts, use correct method.","code":""},{"path":[]},{"path":"/reference/qgis_clean_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean processing results — qgis_clean_result","title":"Clean processing results — qgis_clean_result","text":"Deletes temporary files defined qgis_result object. may comprise input output files.","code":""},{"path":"/reference/qgis_clean_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean processing results — qgis_clean_result","text":"","code":"qgis_clean_result(x)"},{"path":"/reference/qgis_clean_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean processing results — qgis_clean_result","text":"x object returned qgis_run_algorithm().","code":""},{"path":[]},{"path":"/reference/qgis_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure qgisprocess — qgis_configure","title":"Configure qgisprocess — qgis_configure","text":"Run qgis_configure() bring package configuration line QGIS save configuration persistent cache. See Details section information setting path 'qgis_process' command line tool.","code":""},{"path":"/reference/qgis_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure qgisprocess — qgis_configure","text":"","code":"qgis_configure(quiet = FALSE, use_cached_data = FALSE)"},{"path":"/reference/qgis_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure qgisprocess — qgis_configure","text":"quiet Use FALSE display information, possibly useful debugging. use_cached_data Use cached algorithm list path found configuring qgisprocess last session. saves time loading package.","code":""},{"path":"/reference/qgis_configure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure qgisprocess — qgis_configure","text":"result processx::run().","code":""},{"path":"/reference/qgis_configure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure qgisprocess — qgis_configure","text":"qgisprocess package wapper around 'qgis_process' command line tool distributed QGIS (>=3.14). Several functions use heuristics detect location 'qgis_process' executable. loading package, configuration automatically read cache qgis_configure(use_cached_data = TRUE, quiet = TRUE) order save time. Run qgis_configure(use_cached_data = TRUE) manually get details. Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), qgis_path() qgis_version() inspect cache contents. configuration fails one QGIS installation, can set options(qgisprocess.path = \"path//qgis_process\") R_QGISPROCESS_PATH environment variable (useful CI). Linux 'qgis_process' executable generally available user's PATH, MacOS executable within QGIS*.app/Contents/MacOS/bin folder, Windows executable named qgis_process-qgis.bat qgis_process-qgis-dev.bat located Program Files/QGIS*/bin OSGeo4W(64)/bin.","code":""},{"path":[]},{"path":"/reference/qgis_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure qgisprocess — qgis_configure","text":"","code":"if (has_qgis()) qgis_path() #> [1] \"qgis_process\" if (has_qgis()) qgis_version() #> [1] \"3.30.3-'s-Hertogenbosch\" if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_title algorithm                algorithm_id algorithm_title #>    <chr>    <chr>          <chr>                    <chr>        <chr>           #>  1 3d       QGIS (3D)      3d:tessellate            tessellate   Tessellate      #>  2 gdal     GDAL           gdal:aspect              aspect       Aspect          #>  3 gdal     GDAL           gdal:assignprojection    assignproje… Assign project… #>  4 gdal     GDAL           gdal:buffervectors       buffervecto… Buffer vectors  #>  5 gdal     GDAL           gdal:buildvirtualraster  buildvirtua… Build virtual … #>  6 gdal     GDAL           gdal:buildvirtualvector  buildvirtua… Build virtual … #>  7 gdal     GDAL           gdal:cliprasterbyextent  cliprasterb… Clip raster by… #>  8 gdal     GDAL           gdal:cliprasterbymaskla… cliprasterb… Clip raster by… #>  9 gdal     GDAL           gdal:clipvectorbyextent  clipvectorb… Clip vector by… #> 10 gdal     GDAL           gdal:clipvectorbypolygon clipvectorb… Clip vector by… #> # ℹ 339 more rows #> # ℹ 19 more variables: provider_can_be_activated <lgl>, #> #   provider_is_active <lgl>, provider_long_name <chr>, provider_version <chr>, #> #   provider_warning <chr>, can_cancel <lgl>, deprecated <lgl>, group <chr>, #> #   has_known_issues <lgl>, help_url <chr>, requires_matching_crs <lgl>, #> #   short_description <chr>, tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, … if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242 if (has_qgis()) qgis_plugins() #> # A tibble: 4 × 2 #>   name                    enabled #>   <chr>                   <lgl>   #> 1 grassprovider           FALSE   #> 2 otbprovider             FALSE   #> 3 processing              TRUE    #> 4 processing_saga_nextgen FALSE   qgis_configure(use_cached_data = TRUE) #> Checking configuration in cache file (~/.cache/R-qgisprocess/cache-0.0.0.9000.rds) #> Checking cached QGIS version with version reported by 'qgis_process' ... #> QGIS versions match! (3.30.3-'s-Hertogenbosch) #> Checking cached QGIS plugins (and state) with those reported by 'qgis_process' ... #> QGIS plugins match! (1 processing provider plugin(s) enabled) #>  #> >>> Run `qgis_enable_plugins()` to enable 3 disabled plugins and access #>     their algorithms: grassprovider, otbprovider, #>     processing_saga_nextgen #>  #> Restoring configuration from '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> QGIS version: 3.30.3-'s-Hertogenbosch #> Using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 4 available processing provider plugins are enabled. #> Having access to 349 algorithms from 4 QGIS processing providers. #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment. qgis_configure() #> getOption('qgisprocess.path') was not found. #> Sys.getenv('R_QGISPROCESS_PATH') was not found. #> Trying 'qgis_process' on PATH... #> Success! #> Now using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #>  #> QGIS version is now set to: 3.30.3-'s-Hertogenbosch #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 4 available processing provider plugins are enabled. #> You now have access to 349 algorithms from 4 QGIS processing providers. #>  #> >>> Run `qgis_enable_plugins()` to enable 3 disabled plugins and access #>     their algorithms: grassprovider, otbprovider, #>     processing_saga_nextgen #>  #> Saving configuration to '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_using_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment."},{"path":"/reference/qgis_detect_windows_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"Discovers existing 'qgis_process' executables system returns filepath. available Windows macOS systems.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"","code":"qgis_detect_windows_paths(drive_letter = strsplit(R.home(), \":\")[[1]][1])  qgis_detect_macos_paths()"},{"path":"/reference/qgis_detect_windows_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"drive_letter drive letter search. default, drive letter R executable.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"character vector possible paths 'qgis_process' executable.","code":""},{"path":"/reference/qgis_detect_windows_paths.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"functions verify whether discovered 'qgis_process' executables successfully run. can run qgis_path(query = TRUE, quiet = FALSE) discover cache first 'qgis_process' list works.","code":""},{"path":[]},{"path":"/reference/qgis_detect_windows_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect QGIS installations that provide the 'qgis_process' command — qgis_detect_windows_paths","text":"","code":"if (qgisprocess:::is_windows()) qgis_detect_windows_paths() if (qgisprocess:::is_macos()) qgis_detect_macos_paths()"},{"path":"/reference/qgis_enable_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable or disable QGIS plugins — qgis_enable_plugins","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"Processing plugins, installed QGIS, can 'enabled' 'disabled' state QGIS. plugin state can controlled R. qgis_enable_plugins() enables plugins qgis_disable_plugins() reverse.","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"","code":"qgis_enable_plugins(names = NULL, quiet = FALSE)  qgis_disable_plugins(names = NULL, quiet = FALSE)"},{"path":"/reference/qgis_enable_plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"names Optional character vector plugin names. quiet Use FALSE display information, possibly useful debugging.","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"cache immediately updated upon enabling disabling plugins R. Run qgis_plugins() list available plugins implement processing providers. installed, removed, enabled disabled plugins QGIS GUI, run qgis_configure() make changes available R. names provided qgis_enable_plugins(), assumed disabled plugins enabled. names provided qgis_disable_plugins(), assumed enabled plugins disabled. Note 'processing' plugin ignored, always available 'qgis_process' (QGIS though).","code":""},{"path":"/reference/qgis_enable_plugins.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Enable or disable QGIS plugins — qgis_enable_plugins","text":"plugins implement processing providers supported. Installing removing plugins supported.","code":""},{"path":[]},{"path":"/reference/qgis_extract_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Access processing output — qgis_extract_output","title":"Access processing output — qgis_extract_output","text":"functions extract one output element result qgis_run_algorithm(), potentially one case qgis_extract_output_by_class(). output element can extracted based name, position printed qgis_result object returned qgis_run_algorithm(), class. qgis_extract_output() alias qgis_extract_output_by_name().","code":""},{"path":"/reference/qgis_extract_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access processing output — qgis_extract_output","text":"","code":"qgis_extract_output_by_name(x, name = \"OUTPUT\", first = TRUE)  qgis_extract_output(x, name = \"OUTPUT\", first = TRUE)  qgis_extract_output_by_position(x, which)  qgis_extract_output_by_class(x, class, single = TRUE)"},{"path":"/reference/qgis_extract_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access processing output — qgis_extract_output","text":"x object returned qgis_run_algorithm(). name name output. first Logical. qgis_extract_output_by_name() fall back first output element default OUTPUT output element available? takes effect name equal OUTPUT output, found. index output. class Character vector classes. least one class must inherited element x element selected. single Logical. Ensures selection single output qgis_extract_output_by_class(). OUTPUT output element taken available condition inherits specified class; otherwise falls back first element inherits specified class.","code":""},{"path":[]},{"path":"/reference/qgis_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a wrapper function that runs one algorithm — qgis_function","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"opposed qgis_run_algorithm(), qgis_function() creates callable function based argument metadata provided qgis_get_argument_specs().","code":""},{"path":"/reference/qgis_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"","code":"qgis_function(algorithm, ...)"},{"path":"/reference/qgis_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"algorithm qualified algorithm name (e.g., \"native:buffer\"). ... Algorithm arguments. values evaluated immediately, call qgis_tmp_file() .","code":""},{"path":"/reference/qgis_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"logic qgis_function() implemented R package qgis. package also provides QGIS documentation processing algorithm corresponding R function documentation.","code":""},{"path":"/reference/qgis_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a wrapper function that runs one algorithm — qgis_function","text":"","code":"if (has_qgis()) {   qgis_buffer <- qgis_function(\"native:buffer\")   qgis_buffer(     system.file(       \"longlake/longlake_depth.gpkg\",       package = \"qgisprocess\"     ),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e277c3d391.gpkg\""},{"path":"/reference/qgis_list_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a compound input argument — qgis_list_input","title":"Prepare a compound input argument — qgis_list_input","text":"algorithm arguments require compound object, consisting several layers elements. functions apply strict validation rules generating object recommended.","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a compound input argument — qgis_list_input","text":"","code":"qgis_list_input(...)  qgis_dict_input(...)"},{"path":"/reference/qgis_list_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a compound input argument — qgis_list_input","text":"... Named values qgis_dict_input() unnamed values qgis_list_input().","code":""},{"path":"/reference/qgis_list_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a compound input argument — qgis_list_input","text":"qgis_list_input(): object class 'qgis_list_input' qgis_dict_input(): object class 'qgis_dict_input'","code":""},{"path":"/reference/qgis_list_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare a compound input argument — qgis_list_input","text":"qgis_list_input() generates unnamed list class qgis_list_input. use qgis_list_input() instead list() required compound arguments case -JSON input (see qgis_using_json_input()). Since applies strict validation rules, recommended cases though. qgis_dict_input() generates named list class qgis_dict_input. qgis_dict_input() supported JSON input method applies (see qgis_using_json_input()), can interchanged named list(). can used arguments requiring named lists. Since applies strict validation rules, recommended list().","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a compound input argument — qgis_list_input","text":"","code":"qgis_list_input(1, 2, 3) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_list_input\" qgis_dict_input(a = 1, b = 2, c = 3) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_dict_input\""},{"path":"/reference/qgis_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata about the used 'qgis_process' command — qgis_path","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"qgis_path() returns filepath 'qgis_process' command, qgis_version() returns QGIS version.","code":""},{"path":"/reference/qgis_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"","code":"qgis_path(query = FALSE, quiet = TRUE)  qgis_version(query = FALSE, quiet = TRUE, full = TRUE, debug = FALSE)"},{"path":"/reference/qgis_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata about the used 'qgis_process' command — qgis_path","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging. full Logical. FALSE, return \"x.y.z\" version string instead full version string includes name. Defaults TRUE; ignored debug = TRUE. debug Logical. TRUE, also output version QGIS, operating system relevant libraries, reported 'qgis_process' command.","code":""},{"path":[]},{"path":"/reference/qgis_result_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Access processing results: extra tools — qgis_result_status","title":"Access processing results: extra tools — qgis_result_status","text":"qgis_result object list , next output elements, also contains elements can useful scripting. Several can extracted convenience functions: exit status process, standard output standard error 'qgis_process', arguments passed 'qgis_process'.","code":""},{"path":"/reference/qgis_result_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access processing results: extra tools — qgis_result_status","text":"","code":"qgis_result_status(x)  qgis_result_stdout(x)  qgis_result_stderr(x)  qgis_result_args(x)"},{"path":"/reference/qgis_result_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access processing results: extra tools — qgis_result_status","text":"x object returned qgis_run_algorithm().","code":""},{"path":[]},{"path":"/reference/qgis_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the 'qgis_process' command directly — qgis_run","title":"Call the 'qgis_process' command directly — qgis_run","text":"qgis_run() offers full access 'qgis_process'. Run cat(qgis_run(\"--help\")$stdout) get command's help.","code":""},{"path":"/reference/qgis_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the 'qgis_process' command directly — qgis_run","text":"","code":"qgis_run(args = character(), ..., env = qgis_env(), path = qgis_path())"},{"path":"/reference/qgis_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the 'qgis_process' command directly — qgis_run","text":"args Command-line arguments ... Passed processx::run(). env list() environment variables. Defaults getOption(\"qgisprocess.env\", list(QT_QPA_PLATFORM = \"offscreen\")). path path 'qgis_process' executable. Defaults qgis_path().","code":""},{"path":"/reference/qgis_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the 'qgis_process' command directly — qgis_run","text":"processx::run() return value, .e. list status, stdout, stderr timeout elements.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"Runs algorithm using 'qgis_process'. See QGIS docs detailed description algorithms provided 'box' QGIS.","code":""},{"path":"/reference/qgis_run_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"","code":"qgis_run_algorithm(   algorithm,   ...,   PROJECT_PATH = NULL,   ELLIPSOID = NULL,   .raw_json_input = NULL,   .quiet = TRUE )"},{"path":"/reference/qgis_run_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"algorithm qualified algorithm name (e.g., \"native:buffer\") path QGIS model file. ... Named key-value pairs arguments algorithm. Features rlang::list2() supported. arguments converted strings using as_qgis_argument(). PROJECT_PATH, ELLIPSOID Global values QGIS project file ellipsoid name distance calculations. .raw_json_input raw JSON use input place .... .quiet Use FALSE get extra output 'qgis_process'. can useful debugging.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an algorithm using 'qgis_process' — qgis_run_algorithm","text":"","code":"if (has_qgis()) {   qgis_run_algorithm(     \"native:buffer\",     INPUT = system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\"),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e274fb8a8be.gpkg\""},{"path":"/reference/qgis_run_algorithm_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"qgis_run_algorithm_p() wraps qgis_run_algorithm(), passing first argument first argument QGIS algorithm. makes convenient pipeline (hence '_p' name).","code":""},{"path":"/reference/qgis_run_algorithm_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"","code":"qgis_run_algorithm_p(   .data,   algorithm,   ...,   .select = \"OUTPUT\",   .clean = TRUE,   .quiet = TRUE )"},{"path":"/reference/qgis_run_algorithm_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":".data Passed first input algorithm. .data qgis_result (result previous processing step), .data[[.select]] passed instead. algorithm qualified algorithm name (e.g., \"native:buffer\"). ... algorithm arguments. values evaluated immediately, call qgis_tmp_file() . .select String. name element select .data latter qgis_result. Defaults \"OUTPUT\". .clean Logical. incoming qgis_result cleaned (using qgis_clean_result()) processing? .quiet Use FALSE get extra output 'qgis_process'. can useful debugging.","code":""},{"path":"/reference/qgis_run_algorithm_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"Uses qgis_function() hood.","code":""},{"path":[]},{"path":"/reference/qgis_run_algorithm_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an algorithm using 'qgis_process': pipe-friendly wrapper — qgis_run_algorithm_p","text":"","code":"if (has_qgis()) {   system.file(     \"longlake/longlake_depth.gpkg\",     package = \"qgisprocess\"   ) |>     qgis_run_algorithm_p(       \"native:buffer\",       DISTANCE = 10     ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e2755d24dcf.gpkg\""},{"path":"/reference/qgis_search_algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Search geoprocessing algorithms — qgis_search_algorithms","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"Searches algorithms using regular expression. simplest form just string must match part character value.","code":""},{"path":"/reference/qgis_search_algorithms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"","code":"qgis_search_algorithms(algorithm = NULL, provider = NULL, group = NULL)"},{"path":"/reference/qgis_search_algorithms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"algorithm Regular expression match algorithm algorithm_title value output qgis_algorithms(). provider Regular expression match provider provider_title value output qgis_algorithms(). group Regular expression match group value output qgis_algorithms().","code":""},{"path":"/reference/qgis_search_algorithms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"tibble.","code":""},{"path":"/reference/qgis_search_algorithms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"using multiple arguments combination, algorithms returned fulfill conditions. regular expressions stringr::str_detect() can handle, accepted. look stringi::search_regex() get nice overview.","code":""},{"path":[]},{"path":"/reference/qgis_search_algorithms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search geoprocessing algorithms — qgis_search_algorithms","text":"","code":"if (has_qgis()) {   qgis_search_algorithms(     algorithm = \"point.*line\",     provider = \"^native$\"   ) } #> # A tibble: 3 × 5 #>   provider provider_title    group           algorithm           algorithm_title #>   <chr>    <chr>             <chr>           <chr>               <chr>           #> 1 native   QGIS (native c++) Vector geometry native:interpolate… Interpolate po… #> 2 native   QGIS (native c++) Vector geometry native:pointsalong… Points along g… #> 3 native   QGIS (native c++) Vector creation native:randompoint… Random points …"},{"path":"/reference/qgis_show_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Get detailed information about one algorithm — qgis_show_help","title":"Get detailed information about one algorithm — qgis_show_help","text":"Get detailed information one algorithm","code":""},{"path":"/reference/qgis_show_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get detailed information about one algorithm — qgis_show_help","text":"","code":"qgis_show_help(algorithm)  qgis_get_description(algorithm)  qgis_get_argument_specs(algorithm)  qgis_get_output_specs(algorithm)"},{"path":"/reference/qgis_show_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get detailed information about one algorithm — qgis_show_help","text":"algorithm qualified algorithm name (e.g., \"native:buffer\").","code":""},{"path":[]},{"path":"/reference/qgis_show_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get detailed information about one algorithm — qgis_show_help","text":"","code":"if (has_qgis()) qgis_show_help(\"native:filedownloader\") #> Download file (native:filedownloader) #>  #> ---------------- #> Description #> ---------------- #> This algorithm downloads a URL on the file system. #>  #> ---------------- #> Arguments #> ---------------- #>  #> URL: URL #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> METHOD: Method #> \tDefault value:\t0 #> \tThe HTTP method to use for the request #> \tArgument type:\tenum #> \tAvailable values: #> \t\t- 0: GET #> \t\t- 1: POST #> \tAcceptable values: #> \t\t- Number of selected option, e.g. '1' #> \t\t- Comma separated list of options, e.g. '1,3' #> DATA: Data (optional) #> \tThe data to add in the body if the request is a POST #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> OUTPUT: File destination (optional) #> \tArgument type:\tfileDestination #> \tAcceptable values: #> \t\t- Path for new file #>  #> ---------------- #> Outputs #> ---------------- #>  #> OUTPUT: <outputFile> #> \tFile destination #>  #>  #>  if (has_qgis()) qgis_get_description(\"native:filedownloader\") #>                                native:filedownloader  #> \"This algorithm downloads a URL on the file system.\"  if (has_qgis()) qgis_get_argument_specs(\"native:filedownloader\") #> # A tibble: 4 × 6 #>   name   description  qgis_type default_value available_values acceptable_values #>   <chr>  <chr>        <chr>     <list>        <list>           <list>            #> 1 URL    URL          string    <NULL>        <NULL>           <chr [3]>         #> 2 METHOD Method       enum      <int [1]>     <chr [2]>        <chr [2]>         #> 3 DATA   Data         string    <NULL>        <NULL>           <chr [3]>         #> 4 OUTPUT File destin… fileDest… <NULL>        <NULL>           <chr [1]>"},{"path":"/reference/qgis_tmp_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage temporary files — qgis_tmp_file","title":"Manage temporary files — qgis_tmp_file","text":"functions create temporary files can used calls qgis_run_algorithm() elsewhere. files created special temporary directory (qgis_tmp_base()) periodically cleaned using qgis_clean_tmp(). can set preferred vector /raster file extension using options(qgisprocess.tmp_vector_ext = \"...\") /options(qgisprocess.tmp_raster_ext = \"...\"), respectively.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_file(ext)  qgis_tmp_folder()  qgis_tmp_vector(ext = getOption(\"qgisprocess.tmp_vector_ext\", \".gpkg\"))  qgis_tmp_raster(ext = getOption(\"qgisprocess.tmp_raster_ext\", \".tif\"))  qgis_tmp_base()  qgis_clean_tmp()"},{"path":"/reference/qgis_tmp_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage temporary files — qgis_tmp_file","text":"ext file extension used.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage temporary files — qgis_tmp_file","text":"character vector indicating location (yet created) temporary file.","code":""},{"path":[]},{"path":"/reference/qgis_tmp_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_base() #> [1] \"/tmp/RtmpXAOVRf/file2e2736f4fbb0\" qgis_tmp_file(\".csv\") #> [1] \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e2760aced07.csv\" qgis_tmp_vector() #> [1] \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e27b57a29d.gpkg\" qgis_tmp_raster() #> [1] \"/tmp/RtmpXAOVRf/file2e2736f4fbb0/file2e27713d1cb0.tif\""},{"path":"/reference/qgis_unconfigure.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean the package cache — qgis_unconfigure","title":"Clean the package cache — qgis_unconfigure","text":"Empties qgisprocess cache environment.","code":""},{"path":"/reference/qgis_unconfigure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean the package cache — qgis_unconfigure","text":"","code":"qgis_unconfigure()"},{"path":[]},{"path":"/reference/qgis_using_json_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"Returns logical reveals whether JSON input output methods used, respectively.","code":""},{"path":"/reference/qgis_using_json_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"","code":"qgis_using_json_input()  qgis_using_json_output(query = FALSE, quiet = TRUE)"},{"path":"/reference/qgis_using_json_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"query Use TRUE refresh cached value. quiet Use FALSE display information, possibly useful debugging.","code":""},{"path":"/reference/qgis_using_json_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report if JSON objects are used for input to and output from 'qgis_process' — qgis_using_json_input","text":"Since QGIS 3.24 JSON input method 'qgis_process' used default calling command. allows complex input argument types certain algorithms require complex input argument, e.g. list lists (see qgis_list_input()). Likewise, JSON output default output format requested 'qgis_process'. settings can overruled options qgisprocess.use_json_input qgisprocess.use_json_output, environment variables R_QGISPROCESS_USE_JSON_INPUT R_QGISPROCESS_USE_JSON_OUTPUT. Since JSON output method cached package, qgis_using_json_output(query = TRUE) needed settings take effect package loaded already.","code":""},{"path":[]},{"path":"/reference/qgisprocess-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — qgisprocess-deprecated","title":"Deprecated functions — qgisprocess-deprecated","text":"Instead qgis_output(), use qgis_extract_output() related functions. Instead qgis_result_single(), use qgis_extract_output() related functions. Instead qgis_detect_windows(), use qgis_detect_windows_paths(). Instead qgis_detect_macos(), use qgis_detect_macos_paths(). Instead qgis_use_json_input(), use qgis_using_json_input(). Instead qgis_use_json_output(), use qgis_using_json_output(). Instead qgis_description(), use qgis_get_description(). Instead qgis_arguments(), use qgis_get_argument_specs(). Instead qgis_outputs(), use qgis_get_output_specs(). Instead qgis_pipe(), use qgis_run_algorithm_p(). Instead qgis_tmp_clean(), use qgis_clean_tmp(). Instead qgis_result_clean(), use qgis_clean_result().","code":""},{"path":"/reference/qgisprocess-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — qgisprocess-deprecated","text":"","code":"qgis_output(x, which)  qgis_result_single(x, what)  qgis_detect_windows(...)  qgis_detect_macos()  qgis_use_json_input()  qgis_use_json_output(...)  qgis_description(...)  qgis_arguments(...)  qgis_outputs(...)  qgis_pipe(...)  qgis_tmp_clean(...)  qgis_result_clean(...)"},{"path":"/reference/qgisprocess-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — qgisprocess-deprecated","text":"x object returned qgis_run_algorithm(). index output. Character vector classes. ... Arguments passed new function. done functions function name changed time deprecation.","code":""},{"path":"/reference/qgisprocess-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"Provides seamless access QGIS (https://qgis.org/) processing toolbox using standalone 'qgis_process' command-line utility. native third-party (plugin) processing providers supported. Beside referring data sources file, also common R-objects like sf, terra stars objects supported.","code":""},{"path":"/reference/qgisprocess-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"structured overview available functions can consulted https://r-spatial.github.io/qgisprocess/reference/index.html.","code":""},{"path":[]},{"path":"/reference/qgisprocess-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qgisprocess: Using QGIS Processing Algorithms from R — qgisprocess-package","text":"Maintainer: Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) Authors: Dewey Dunnington dewey@fishandwhistle.net (ORCID) Jan Caha jan.caha@outlook.com (ORCID) Jannes Muenchow malnamalja@gmx.de (ORCID) contributors: Antony Barja antony.barja8@gmail.com (ORCID) [contributor] Robin Lovelace rob00x@gmail.com (ORCID) [contributor] Jakub Nowosad nowosad.jakub@gmail.com (ORCID) [contributor]","code":""},{"path":"/reference/st_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object to an sf object — st_as_sf","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"Convert qgis_result object sf object","code":""},{"path":"/reference/st_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"","code":"st_as_sf.qgis_result(x, ...)"},{"path":"/reference/st_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"x result qgis_run_algorithm(). ... Arguments passed sf::read_sf().","code":""},{"path":"/reference/st_as_sf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object to an sf object — st_as_sf","text":"Just use st_as_sf() R scripts, use correct method.","code":""},{"path":[]},{"path":"/reference/st_as_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"Convert qgis_result object one elements stars object","code":""},{"path":"/reference/st_as_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"","code":"st_as_stars.qgis_outputRaster(.x, ...)  st_as_stars.qgis_outputLayer(.x, ...)  st_as_stars.qgis_result(.x, ...)"},{"path":"/reference/st_as_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":".x result qgis_run_algorithm() one qgis_extract_output() functions. ... Arguments passed stars::read_stars().","code":""},{"path":"/reference/st_as_stars.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a qgis_result object or one of its elements to a stars object — st_as_stars","text":"Just use st_as_stars() R scripts, use correct method.","code":""},{"path":[]}]
