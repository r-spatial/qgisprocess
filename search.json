[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer. Floris Vanderhaeghe. Author. Jan Caha. Author. Antony Barja. Contributor. Robin Lovelace. Contributor. Jakub Nowosad. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D, Vanderhaeghe F, Caha J (2023). qgisprocess: Use 'QGIS' Processing Algorithms. R package version 0.0.0.9000, https://github.com/paleolimbot/qgisprocess.","code":"@Manual{,   title = {qgisprocess: Use 'QGIS' Processing Algorithms},   author = {Dewey Dunnington and Floris Vanderhaeghe and Jan Caha},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/paleolimbot/qgisprocess}, }"},{"path":"/index.html","id":"qgisprocess","dir":"","previous_headings":"","what":"Use QGIS Processing Algorithms","title":"Use QGIS Processing Algorithms","text":"goal qgisprocess provide R interface popular open source desktop geographic information system (GIS) program QGIS. package re-implementation functionality provided archived RQGIS package, partially revived RQGIS3 package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Use QGIS Processing Algorithms","text":"can install development version GitHub : qgisprocess package wraps qgis_process command-line utility, available QGIS >= 3.14.16, released September 2020. MacOS users install QIGS >= 3.16; download instructions platforms available https://download.qgis.org/. recent version QGIS isn’t available OS, can use one Geocomputation R Docker images QGIS installed. automatic configuration fails (one installation like choose one used qgisprocess), can set options(qgisprocess.path = \"path//qgis_process\"), possibly .Rprofile persist sessions. can run qgis_configure() print gritty details!","code":"# install.packages(\"remotes\") remotes::install_github(\"paleolimbot/qgisprocess\") library(qgisprocess) #> Using 'qgis_process' at '/Applications/QGIS.app/Contents/MacOS/bin/qgis_process'. #> Run `qgis_configure()` for details. qgis_configure() #> getOption('qgisprocess.path') was not found. #> Sys.getenv('R_QGISPROCESS_PATH') was not found. #> Trying 'qgis_process' on PATH #> Error in rethrow_call(c_processx_exec, command, c(command, args), stdin, : cannot start processx process 'qgis_process' (system error 2, No such file or directory) @unix/processx.c:604 (processx_exec) #> Found 1 QGIS installation containing 'qgis_process': #>  /Applications/QGIS.app/Contents/MacOS/bin/qgis_process #> Trying command '/Applications/QGIS.app/Contents/MacOS/bin/qgis_process' #> Success!"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Use QGIS Processing Algorithms","text":"following example demonstrates buffer algorithm action. passing sf raster objects experimentally supported (well-supported future!).  can read help associated algorithm using qgis_show_help(): may also useful run algorithm QGIS GUI examine console ‘Input parameters’ determine various input values translated string processing arguments:  list available algorithms can found using qgis_algorithms(). using R interactively, may useful use View(qgis_algorithms()) search.","code":"input <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))  result <- qgis_run_algorithm(   \"native:buffer\",   INPUT = input,   DISTANCE = 1,   DISSOLVE = TRUE,   .quiet = TRUE ) #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()`  result #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/var/folders/bq/2rcjstv90nx1_wrt8d3gqw6m0000gn/T//RtmptXCayy/file9b2b462efaa9/file9b2b5212f730.gpkg\"  output_sf <- sf::read_sf(qgis_output(result, \"OUTPUT\")) plot(sf::st_geometry(output_sf)) qgis_show_help(\"native:buffer\") #> Buffer (native:buffer) #>  #> ---------------- #> Description #> ---------------- #> This algorithm computes a buffer area for all the features in an input layer, using a fixed or dynamic distance. #>  #> The segments parameter controls the number of line segments to use to approximate a quarter circle when creating rounded offsets. #>  #> The end cap style parameter controls how line endings are handled in the buffer. #>  #> The join style parameter specifies whether round, miter or beveled joins should be used when offsetting corners in a line. #>  #> The miter limit parameter is only applicable for miter join styles, and controls the maximum distance from the offset curve to use when creating a mitered join. #>  #> ---------------- #> Arguments #> ---------------- #>  #> INPUT: Input layer #>  Argument type:  source #>  Acceptable values: #>      - Path to a vector layer #> DISTANCE: Distance #>  Argument type:  distance #>  Acceptable values: #>      - A numeric value #> SEGMENTS: Segments #>  The segments parameter controls the number of line segments to use to approximate a quarter circle when creating rounded offsets. #>  Argument type:  number #>  Acceptable values: #>      - A numeric value #> END_CAP_STYLE: End cap style #>  Argument type:  enum #>  Available values: #>      - 0: Round #>      - 1: Flat #>      - 2: Square #>  Acceptable values: #>      - Number of selected option, e.g. '1' #>      - Comma separated list of options, e.g. '1,3' #> JOIN_STYLE: Join style #>  Argument type:  enum #>  Available values: #>      - 0: Round #>      - 1: Miter #>      - 2: Bevel #>  Acceptable values: #>      - Number of selected option, e.g. '1' #>      - Comma separated list of options, e.g. '1,3' #> MITER_LIMIT: Miter limit #>  Argument type:  number #>  Acceptable values: #>      - A numeric value #> DISSOLVE: Dissolve result #>  Argument type:  boolean #>  Acceptable values: #>      - 1 for true/yes #>      - 0 for false/no #> OUTPUT: Buffered #>  Argument type:  sink #>  Acceptable values: #>      - Path for new vector layer #>  #> ---------------- #> Outputs #> ---------------- #>  #> OUTPUT: <outputVector> #>  Buffered qgis_algorithms() #> # A tibble: 986 x 5 #>    provider provider_title algorithm         algorithm_id    algorithm_title     #>    <chr>    <chr>          <chr>             <chr>           <chr>               #>  1 3d       QGIS (3D)      3d:tessellate     tessellate      Tessellate          #>  2 gdal     GDAL           gdal:aspect       aspect          Aspect              #>  3 gdal     GDAL           gdal:assignproje… assignprojecti… Assign projection   #>  4 gdal     GDAL           gdal:buffervecto… buffervectors   Buffer vectors      #>  5 gdal     GDAL           gdal:buildvirtua… buildvirtualra… Build virtual rast… #>  6 gdal     GDAL           gdal:buildvirtua… buildvirtualve… Build virtual vect… #>  7 gdal     GDAL           gdal:cliprasterb… cliprasterbyex… Clip raster by ext… #>  8 gdal     GDAL           gdal:cliprasterb… cliprasterbyma… Clip raster by mas… #>  9 gdal     GDAL           gdal:clipvectorb… clipvectorbyex… Clip vector by ext… #> 10 gdal     GDAL           gdal:clipvectorb… clipvectorbypo… Clip vector by mas… #> # … with 976 more rows"},{"path":"/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"Use QGIS Processing Algorithms","text":"paper original RQGIS package published R Journal discussion options running QGIS R led package pull request QGIS repo led development qgis_process command-line utility","code":""},{"path":"/reference/as_qgis_argument.RasterLayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.RasterLayer","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.RasterLayer","text":"Convert raster objects /QGIS inputs/outputs","code":""},{"path":"/reference/as_qgis_argument.RasterLayer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.RasterLayer","text":"","code":"# S3 method for RasterLayer as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for RasterBrick as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_as_raster(output, ...)  qgis_as_brick(output, ...)  # S3 method for qgis_outputRaster qgis_as_raster(output, ...)  # S3 method for qgis_outputRaster qgis_as_brick(output, ...)  # S3 method for qgis_outputLayer qgis_as_raster(output, ...)  # S3 method for qgis_outputLayer qgis_as_brick(output, ...)  # S3 method for qgis_result qgis_as_raster(output, ...)  # S3 method for qgis_result qgis_as_brick(output, ...)"},{"path":"/reference/as_qgis_argument.RasterLayer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.RasterLayer","text":"x raster::raster() raster::brick(). spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. use_json_input TRUE arguments serialized JSON instead serialized command-line argument. output result qgis_run_algorithm() qgis_output(). ... Passed raster::raster() raster::brick().","code":""},{"path":"/reference/as_qgis_argument.SpatRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert terra objects to/from QGIS inputs/outputs — as_qgis_argument.SpatRaster","title":"Convert terra objects to/from QGIS inputs/outputs — as_qgis_argument.SpatRaster","text":"Convert terra objects /QGIS inputs/outputs","code":""},{"path":"/reference/as_qgis_argument.SpatRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert terra objects to/from QGIS inputs/outputs — as_qgis_argument.SpatRaster","text":"","code":"# S3 method for SpatRaster as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_as_terra(output, ...)  # S3 method for qgis_outputRaster qgis_as_terra(output, ...)  # S3 method for qgis_outputLayer qgis_as_terra(output, ...)  # S3 method for qgis_result qgis_as_terra(output, ...)"},{"path":"/reference/as_qgis_argument.SpatRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert terra objects to/from QGIS inputs/outputs — as_qgis_argument.SpatRaster","text":"x terra::rast(). spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. use_json_input TRUE arguments serialized JSON instead serialized command-line argument. output result qgis_run_algorithm() qgis_output(). ... Passed terra::rast().","code":""},{"path":"/reference/as_qgis_argument.sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sf objects to/from QGIS inputs/outputs — as_qgis_argument.sf","title":"Convert sf objects to/from QGIS inputs/outputs — as_qgis_argument.sf","text":"Convert sf objects /QGIS inputs/outputs","code":""},{"path":"/reference/as_qgis_argument.sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sf objects to/from QGIS inputs/outputs — as_qgis_argument.sf","text":"","code":"# S3 method for sf as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for crs as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for bbox as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for sfc as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for POINT as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)"},{"path":"/reference/as_qgis_argument.sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sf objects to/from QGIS inputs/outputs — as_qgis_argument.sf","text":"x object passed QGIS processing algorithm spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. use_json_input TRUE arguments serialized JSON instead serialized command-line argument.","code":""},{"path":"/reference/as_qgis_argument.stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.stars","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.stars","text":"Convert raster objects /QGIS inputs/outputs","code":""},{"path":"/reference/as_qgis_argument.stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.stars","text":"","code":"# S3 method for stars as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for stars_proxy as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)"},{"path":"/reference/as_qgis_argument.stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raster objects to/from QGIS inputs/outputs — as_qgis_argument.stars","text":"x stars stars_proxy object. spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. use_json_input TRUE arguments serialized JSON instead serialized command-line argument.","code":""},{"path":"/reference/is_qgis_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Access algorithm results — is_qgis_result","title":"Access algorithm results — is_qgis_result","text":"Access algorithm results","code":""},{"path":"/reference/is_qgis_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access algorithm results — is_qgis_result","text":"","code":"is_qgis_result(x)  qgis_result_clean(x)  qgis_output(x, which, default = qgis_error_output_does_not_exist(x, which))  qgis_error_output_does_not_exist(x, which)  qgis_result_single(x, what)  qgis_result_status(x)  qgis_result_stdout(x)  qgis_result_stderr(x)  qgis_result_args(x)"},{"path":"/reference/is_qgis_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access algorithm results — is_qgis_result","text":"x object returned qgis_run_algorithm(). name index output. default default value output exist. Character vector classes. least one class must inherited element x element selected.","code":""},{"path":"/reference/is_qgis_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Access algorithm results — is_qgis_result","text":"qgis_result_single() tries extract single useful element qgis_result object.","code":""},{"path":"/reference/qgis_argument_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify QGIS argument types — qgis_argument_spec","title":"Specify QGIS argument types — qgis_argument_spec","text":"Specify QGIS argument types","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"qgis_argument_spec(   algorithm = NA_character_,   name = NA_character_,   description = NA_character_,   qgis_type = NA_character_,   available_values = character(0),   acceptable_values = character(0) )"},{"path":"/reference/qgis_argument_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify QGIS argument types — qgis_argument_spec","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file. name, description, qgis_type, available_values, acceptable_values Column values arguments denoting argument name, description, acceptable values.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify QGIS argument types — qgis_argument_spec","text":"list() element input argument.","code":""},{"path":"/reference/qgis_argument_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify QGIS argument types — qgis_argument_spec","text":"","code":"qgis_argument_spec() #> $algorithm #> [1] NA #>  #> $name #> [1] NA #>  #> $description #> [1] NA #>  #> $qgis_type #> [1] NA #>  #> $available_values #> character(0) #>  #> $acceptable_values #> character(0) #>  if (has_qgis()) qgis_argument_spec_by_name(\"native:filedownloader\", \"URL\") #> $algorithm #> [1] \"native:filedownloader\" #>  #> $name #> [1] \"URL\" #>  #> $description #> [1] \"URL\" #>  #> $qgis_type #> [1] \"string\" #>  #> $default_value #> NULL #>  #> $available_values #> NULL #>  #> $acceptable_values #> [1] \"String value\"                                                                                     #> [2] \"field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field\"                     #> [3] \"expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression\" #>"},{"path":"/reference/qgis_detect_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","title":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","text":"Detect QGIS installations 'qgis_process'","code":""},{"path":"/reference/qgis_detect_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","text":"","code":"qgis_detect_windows(drive_letter = strsplit(R.home(), \":\")[[1]][1])  qgis_detect_macos()  is_macos()  is_windows()"},{"path":"/reference/qgis_detect_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","text":"drive_letter drive letter search. default, drive letter R executable.","code":""},{"path":"/reference/qgis_detect_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","text":"character vector possible paths QGIS executable.","code":""},{"path":"/reference/qgis_detect_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect QGIS installations with 'qgis_process' — qgis_detect_windows","text":"","code":"if (is_windows()) qgis_detect_windows() if (is_macos()) qgis_detect_macos()"},{"path":"/reference/qgis_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create functions from QGIS algorithms — qgis_function","title":"Create functions from QGIS algorithms — qgis_function","text":"opposed qgis_run_algorithm(), qgis_function() creates callable function based argument metadata provided qgis_arguments(). Unlike qgis_run_algorithm(), qgis_function() sets default value .quiet TRUE make function usable within R code. Similarly, qgis_pipe() wraps qgis_run_algorithm(), passing first argument first input algorithm.","code":""},{"path":"/reference/qgis_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create functions from QGIS algorithms — qgis_function","text":"","code":"qgis_function(algorithm, ...)  qgis_pipe(.data, algorithm, ..., .quiet = TRUE)"},{"path":"/reference/qgis_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create functions from QGIS algorithms — qgis_function","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file. ... Default values set using qgis_function(). values evaluated immediately, call qgis_tmp_file() . .data Passed first input algorithm. .quiet Use TRUE suppress output processing algorithms.","code":""},{"path":"/reference/qgis_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create functions from QGIS algorithms — qgis_function","text":"","code":"if (has_qgis()) {   qgis_buffer <- qgis_function(\"native:buffer\")   qgis_buffer(     system.file(       \"longlake/longlake_depth.gpkg\",       package = \"qgisprocess\"     ),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee633904f6.gpkg\"  if (has_qgis()) {   qgis_pipe(     system.file(       \"longlake/longlake_depth.gpkg\",       package = \"qgisprocess\"     ),     \"native:buffer\",     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee606df084.gpkg\""},{"path":"/reference/qgis_has_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run algorithms using 'qgis_process' — qgis_has_algorithm","title":"Run algorithms using 'qgis_process' — qgis_has_algorithm","text":"Run QGIS algorithms. See QGIS docs detailed description algorithms provided 'box' QGIS (versions >= 3.14).","code":""},{"path":"/reference/qgis_has_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run algorithms using 'qgis_process' — qgis_has_algorithm","text":"","code":"qgis_has_algorithm(algorithm)  qgis_algorithms(query = FALSE, quiet = TRUE)  qgis_has_provider(provider, query = FALSE, quiet = TRUE)  qgis_providers()  assert_qgis_algorithm(algorithm)"},{"path":"/reference/qgis_has_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run algorithms using 'qgis_process' — qgis_has_algorithm","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file. query Use TRUE refresh cached value. quiet Use TRUE suppress output processing algorithms. provider provider identifier (e.g., \"native\")","code":""},{"path":"/reference/qgis_has_algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run algorithms using 'qgis_process' — qgis_has_algorithm","text":"","code":"if (has_qgis()) qgis_has_algorithm(\"native:filedownloader\") #> [1] TRUE if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_t…¹ algor…² algor…³ algor…⁴ provi…⁵ provi…⁶ provi…⁷ provi…⁸ #>    <chr>    <chr>        <chr>   <chr>   <chr>   <lgl>   <lgl>   <chr>   <chr>   #>  1 3d       QGIS (3D)    3d:tes… tessel… Tessel… TRUE    TRUE    QGIS (… NA      #>  2 gdal     GDAL         gdal:a… aspect  Aspect  TRUE    TRUE    GDAL (… NA      #>  3 gdal     GDAL         gdal:a… assign… Assign… TRUE    TRUE    GDAL (… NA      #>  4 gdal     GDAL         gdal:b… buffer… Buffer… TRUE    TRUE    GDAL (… NA      #>  5 gdal     GDAL         gdal:b… buildv… Build … TRUE    TRUE    GDAL (… NA      #>  6 gdal     GDAL         gdal:b… buildv… Build … TRUE    TRUE    GDAL (… NA      #>  7 gdal     GDAL         gdal:c… clipra… Clip r… TRUE    TRUE    GDAL (… NA      #>  8 gdal     GDAL         gdal:c… clipra… Clip r… TRUE    TRUE    GDAL (… NA      #>  9 gdal     GDAL         gdal:c… clipve… Clip v… TRUE    TRUE    GDAL (… NA      #> 10 gdal     GDAL         gdal:c… clipve… Clip v… TRUE    TRUE    GDAL (… NA      #> # … with 339 more rows, 15 more variables: provider_warning <chr>, #> #   can_cancel <lgl>, deprecated <lgl>, group <chr>, has_known_issues <lgl>, #> #   help_url <chr>, requires_matching_crs <lgl>, short_description <chr>, #> #   tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, #> #   supported_output_raster_extensions <list>, #> #   supported_output_table_extensions <list>, … if (has_qgis()) qgis_has_provider(\"native\") #> [1] TRUE if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242"},{"path":"/reference/qgis_list_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify lists and dictionary inputs — qgis_list_input","title":"Specify lists and dictionary inputs — qgis_list_input","text":"Specify lists dictionary inputs","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify lists and dictionary inputs — qgis_list_input","text":"","code":"qgis_list_input(...)  qgis_dict_input(...)"},{"path":"/reference/qgis_list_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify lists and dictionary inputs — qgis_list_input","text":"... Named values qgis_dict_input() unnamed values qgis_list_input().","code":""},{"path":"/reference/qgis_list_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify lists and dictionary inputs — qgis_list_input","text":"qgis_list_input(): object class 'qgis_list_input' qgis_dict_input(): object class 'qgis_dict_input'","code":""},{"path":"/reference/qgis_list_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify lists and dictionary inputs — qgis_list_input","text":"","code":"qgis_list_input(1, 2, 3) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_list_input\" qgis_dict_input(a = 1, b = 2, c = 3) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> attr(,\"class\") #> [1] \"qgis_dict_input\""},{"path":"/reference/qgis_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"List, enable or disable QGIS plugins — qgis_plugins","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"qgis_plugins() lists available plugins implement Processing providers. qgis_enable_plugins() enables plugins qgis_disable_plugins() reverse.","code":""},{"path":"/reference/qgis_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"","code":"qgis_plugins(which = \"all\", query = FALSE, quiet = TRUE, ...)  qgis_enable_plugins(names = NULL, quiet = FALSE)  qgis_disable_plugins(names = NULL, quiet = FALSE)"},{"path":"/reference/qgis_plugins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"String defining plugins select, based status QGIS (enabled disabled). Must one : \"\", \"enabled\", \"disabled\". query Use TRUE refresh cached value. quiet Use FALSE display information command, possibly useful debugging. ... used functions calling function. names Optional character vector plugin names.","code":""},{"path":"/reference/qgis_plugins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"tibble plugins status.","code":""},{"path":"/reference/qgis_plugins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"cache immediately updated upon enabling disabling plugins R. installed, removed, enabled disabled plugins QGIS GUI, run qgis_configure() make changes available R. names provided qgis_enable_plugins(), assumed disabled plugins enabled. names provided qgis_disable_plugins(), assumed enabled plugins disabled. Note 'processing' plugin ignored, always available 'qgis_process' (QGIS though).","code":""},{"path":"/reference/qgis_plugins.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List, enable or disable QGIS plugins — qgis_plugins","text":"plugins implement Processing providers supported. Installing removing plugins supported.","code":""},{"path":"/reference/qgis_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure and run 'qgis_process' — qgis_run","title":"Configure and run 'qgis_process' — qgis_run","text":"Run qgis_configure() bring package configuration line QGIS save configuration persistent cache. See Details section information setting path 'qgis_process' command line tool. qgis_run() meant directly calling tool, normally needed.","code":""},{"path":"/reference/qgis_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure and run 'qgis_process' — qgis_run","text":"","code":"qgis_run(args = character(), ..., env = qgis_env(), path = qgis_path())  has_qgis()  assert_qgis(action = abort)  qgis_configure(quiet = FALSE, use_cached_data = FALSE)  qgis_unconfigure()  qgis_version(query = FALSE, quiet = TRUE, debug = FALSE)  qgis_path(query = FALSE, quiet = TRUE)  qgis_use_json_output(query = FALSE, quiet = TRUE)  qgis_use_json_input()  qgis_env()"},{"path":"/reference/qgis_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure and run 'qgis_process' — qgis_run","text":"args Command-line arguments ... Passed processx::run(). env list() environment variables. Defaults qgis_env(). path path 'qgis_process' executable. Defaults qgis_path(). action action take 'qgis_process' executable found. quiet Use FALSE display information command, possibly useful debugging. use_cached_data Use cached algorithm list path found configuring qgisprocess last session. saves time loading package. query Use TRUE refresh cached value. debug Logical. TRUE, also output version QGIS, operating system relevant libraries, reported 'qgis_process' command.","code":""},{"path":"/reference/qgis_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure and run 'qgis_process' — qgis_run","text":"result processx::run().","code":""},{"path":"/reference/qgis_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure and run 'qgis_process' — qgis_run","text":"qgisprocess package wapper around 'qgis_process' command line tool distributed QGIS (>=3.14). Several functions use heuristics detect location 'qgis_process' executable. loading package, configuration automatically read cache qgis_configure(use_cached_data = TRUE, quiet = TRUE) order save time. Run qgis_configure(use_cached_data = TRUE) manually get details. Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_use_json_output(), qgis_path() qgis_version() inspect cache contents. configuration fails one QGIS installation, can set options(qgisprocess.path = \"path//qgis_process\") R_QGISPROCESS_PATH environment variable (useful CI). Linux 'qgis_process' executable generally available user's PATH, MacOS executable within QGIS*.app/Contents/MacOS/bin folder, Windows executable named qgis_process-qgis.bat qgis_process-qgis-dev.bat located Program Files/QGIS*/bin OSGeo4W(64)/bin.","code":""},{"path":"/reference/qgis_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure and run 'qgis_process' — qgis_run","text":"","code":"if (has_qgis()) qgis_path() #> [1] \"qgis_process\" if (has_qgis()) qgis_version() #> [1] \"3.30.0-'s-Hertogenbosch\" if (has_qgis()) qgis_algorithms() #> # A tibble: 349 × 24 #>    provider provider_t…¹ algor…² algor…³ algor…⁴ provi…⁵ provi…⁶ provi…⁷ provi…⁸ #>    <chr>    <chr>        <chr>   <chr>   <chr>   <lgl>   <lgl>   <chr>   <chr>   #>  1 3d       QGIS (3D)    3d:tes… tessel… Tessel… TRUE    TRUE    QGIS (… NA      #>  2 gdal     GDAL         gdal:a… aspect  Aspect  TRUE    TRUE    GDAL (… NA      #>  3 gdal     GDAL         gdal:a… assign… Assign… TRUE    TRUE    GDAL (… NA      #>  4 gdal     GDAL         gdal:b… buffer… Buffer… TRUE    TRUE    GDAL (… NA      #>  5 gdal     GDAL         gdal:b… buildv… Build … TRUE    TRUE    GDAL (… NA      #>  6 gdal     GDAL         gdal:b… buildv… Build … TRUE    TRUE    GDAL (… NA      #>  7 gdal     GDAL         gdal:c… clipra… Clip r… TRUE    TRUE    GDAL (… NA      #>  8 gdal     GDAL         gdal:c… clipra… Clip r… TRUE    TRUE    GDAL (… NA      #>  9 gdal     GDAL         gdal:c… clipve… Clip v… TRUE    TRUE    GDAL (… NA      #> 10 gdal     GDAL         gdal:c… clipve… Clip v… TRUE    TRUE    GDAL (… NA      #> # … with 339 more rows, 15 more variables: provider_warning <chr>, #> #   can_cancel <lgl>, deprecated <lgl>, group <chr>, has_known_issues <lgl>, #> #   help_url <chr>, requires_matching_crs <lgl>, short_description <chr>, #> #   tags <list>, default_raster_file_extension <chr>, #> #   default_vector_file_extension <chr>, #> #   supported_output_raster_extensions <list>, #> #   supported_output_table_extensions <list>, … if (has_qgis()) qgis_providers() #> # A tibble: 4 × 3 #>   provider provider_title    algorithm_count #>   <chr>    <chr>                       <int> #> 1 gdal     GDAL                           56 #> 2 qgis     QGIS                           50 #> 3 3d       QGIS (3D)                       1 #> 4 native   QGIS (native c++)             242 if (has_qgis()) qgis_plugins() #> # A tibble: 3 × 2 #>   name          enabled #>   <chr>         <lgl>   #> 1 grassprovider FALSE   #> 2 otbprovider   FALSE   #> 3 processing    TRUE    qgis_configure(use_cached_data = TRUE) #> Checking configuration in cache file (~/.cache/R-qgisprocess/cache-0.0.0.9000.rds) #> Checking cached QGIS version with version reported by 'qgis_process' ... #> QGIS versions match! (3.30.0-'s-Hertogenbosch) #> Checking cached QGIS plugins (and state) with those reported by 'qgis_process' ... #> QGIS plugins match! (1 processing provider plugin(s) enabled) #>  #> >>> Run `qgis_enable_plugins()` to enable 2 disabled plugin(s) and #>     access their algorithms: grassprovider, otbprovider #>  #> Restoring configuration from '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> QGIS version: 3.30.0-'s-Hertogenbosch #> Using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 3 available processing provider plugins are enabled. #> Having access to 349 algorithms from 4 QGIS processing providers. #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_use_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment. qgis_configure() #> getOption('qgisprocess.path') was not found. #> Sys.getenv('R_QGISPROCESS_PATH') was not found. #> Trying 'qgis_process' on PATH... #> Success! #> Now using 'qgis_process' in the system PATH. #> >>> If you need another installed QGIS instance, run `qgis_configure()`; #>     see `?qgis_configure` if you need to preset the path of 'qgis_process'. #>  #> QGIS version is now set to: 3.30.0-'s-Hertogenbosch #> Using JSON for output serialization. #> Using JSON for input serialization. #> 1 out of 3 available processing provider plugins are enabled. #> You now have access to 349 algorithms from 4 QGIS processing providers. #>  #> >>> Run `qgis_enable_plugins()` to enable 2 disabled plugin(s) and #>     access their algorithms: grassprovider, otbprovider #>  #> Saving configuration to '~/.cache/R-qgisprocess/cache-0.0.0.9000.rds' #> Use qgis_algorithms(), qgis_providers(), qgis_plugins(), qgis_use_json_output(), #> qgis_path() and qgis_version() to inspect the cache environment."},{"path":"/reference/qgis_run_algorithm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run algorithms using 'qgis_process' — qgis_run_algorithm","title":"Run algorithms using 'qgis_process' — qgis_run_algorithm","text":"Run QGIS algorithms. See QGIS docs detailed description algorithms provided 'box' QGIS (versions >= 3.14).","code":""},{"path":"/reference/qgis_run_algorithm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run algorithms using 'qgis_process' — qgis_run_algorithm","text":"","code":"qgis_run_algorithm(   algorithm,   ...,   PROJECT_PATH = NULL,   ELLIPSOID = NULL,   .raw_json_input = NULL,   .quiet = FALSE )"},{"path":"/reference/qgis_run_algorithm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run algorithms using 'qgis_process' — qgis_run_algorithm","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file. ... Named key-value pairs arguments algorithm. Features rlang::list2() supported. arguments converted strings using as_qgis_argument(). PROJECT_PATH, ELLIPSOID Global values QGIS project file ellipsoid name distance calculations. .raw_json_input raw JSON use input place .... .quiet Use TRUE suppress output processing algorithms.","code":""},{"path":"/reference/qgis_run_algorithm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run algorithms using 'qgis_process' — qgis_run_algorithm","text":"","code":"if (has_qgis()) {   qgis_run_algorithm(     \"native:buffer\",     INPUT = system.file(\"longlake/longlake_depth.gpkg\", package = \"qgisprocess\"),     DISTANCE = 10   ) } #> Argument `SEGMENTS` is unspecified (using QGIS default value). #> Using `END_CAP_STYLE = \"Round\"` #> Using `JOIN_STYLE = \"Round\"` #> Argument `MITER_LIMIT` is unspecified (using QGIS default value). #> Argument `DISSOLVE` is unspecified (using QGIS default value). #> Using `OUTPUT = qgis_tmp_vector()` #> JSON input ---- #> { #>   \"inputs\": { #>     \"INPUT\": \"/home/runner/work/_temp/Library/qgisprocess/longlake/longlake_depth.gpkg\", #>     \"DISTANCE\": 10, #>     \"END_CAP_STYLE\": 0, #>     \"JOIN_STYLE\": 0, #>     \"OUTPUT\": \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee11c8ca5f.gpkg\" #>   } #> } #>  #> Running qgis_process --json run 'native:buffer' - #>  #> <Result of `qgis_run_algorithm(\"native:buffer\", ...)`> #> List of 1 #>  $ OUTPUT: 'qgis_outputVector' chr \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee11c8ca5f.gpkg\""},{"path":"/reference/qgis_sanitize_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Type coercion for arguments to QGIS processing algorithms — qgis_sanitize_arguments","title":"Type coercion for arguments to QGIS processing algorithms — qgis_sanitize_arguments","text":"Calls qgis_run_algorithm() can contain R objects need serialized passed command line. cases (e.g., sf objects), temporary files need written cleaned . as_qgis_argument() qgis_clean_argument() S3 generics provide hooks argument values serialized correctly.","code":""},{"path":"/reference/qgis_sanitize_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type coercion for arguments to QGIS processing algorithms — qgis_sanitize_arguments","text":"","code":"qgis_sanitize_arguments(   algorithm,   ...,   .algorithm_arguments = qgis_arguments(algorithm),   .use_json_input = FALSE )  qgis_clean_arguments(arguments)  as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_default_value()  is_qgis_default_value(x)  # S3 method for default as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for list as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for qgis_default_value as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for `NULL` as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for character as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for logical as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  # S3 method for numeric as_qgis_argument(x, spec = qgis_argument_spec(), use_json_input = FALSE)  qgis_clean_argument(value)  # S3 method for default qgis_clean_argument(value)  # S3 method for qgis_tempfile_arg qgis_clean_argument(value)  qgis_argument_spec_by_name(   algorithm,   name,   .algorithm_arguments = qgis_arguments(algorithm) )"},{"path":"/reference/qgis_sanitize_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type coercion for arguments to QGIS processing algorithms — qgis_sanitize_arguments","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file. ... Named key-value pairs arguments algorithm. Features rlang::list2() supported. arguments converted strings using as_qgis_argument(). .algorithm_arguments result qgis_arguments() .use_json_input, use_json_input TRUE arguments serialized JSON instead serialized command-line argument. arguments result qgis_sanitize_arguments(). x object passed QGIS processing algorithm spec list() values algorithm, name, description, qgis_type. See qgis_argument_spec() create blank spec testing. value result as_qgis_argument() QGIS processing algorithm run. name name input argument","code":""},{"path":"/reference/qgis_show_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Show algorithm help — qgis_show_help","title":"Show algorithm help — qgis_show_help","text":"Show algorithm help","code":""},{"path":"/reference/qgis_show_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show algorithm help — qgis_show_help","text":"","code":"qgis_show_help(algorithm)  qgis_description(algorithm)  qgis_arguments(algorithm)  qgis_outputs(algorithm)  qgis_help(algorithm)"},{"path":"/reference/qgis_show_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show algorithm help — qgis_show_help","text":"algorithm qualified algorithm name (e.g., \"native:filedownloader\") path QGIS model file.","code":""},{"path":"/reference/qgis_show_help.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show algorithm help — qgis_show_help","text":"","code":"if (has_qgis()) qgis_show_help(\"native:filedownloader\") #> Download file (native:filedownloader) #>  #> ---------------- #> Description #> ---------------- #> This algorithm downloads a URL on the file system. #>  #> ---------------- #> Arguments #> ---------------- #>  #> URL: URL #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> METHOD: Method #> \tDefault value:\t0 #> \tThe HTTP method to use for the request #> \tArgument type:\tenum #> \tAvailable values: #> \t\t- 0: GET #> \t\t- 1: POST #> \tAcceptable values: #> \t\t- Number of selected option, e.g. '1' #> \t\t- Comma separated list of options, e.g. '1,3' #> DATA: Data (optional) #> \tThe data to add in the body if the request is a POST #> \tArgument type:\tstring #> \tAcceptable values: #> \t\t- String value #> \t\t- field:FIELD_NAME to use a data defined value taken from the FIELD_NAME field #> \t\t- expression:SOME EXPRESSION to use a data defined value calculated using a custom QGIS expression #> OUTPUT: File destination (optional) #> \tArgument type:\tfileDestination #> \tAcceptable values: #> \t\t- Path for new file #>  #> ---------------- #> Outputs #> ---------------- #>  #> OUTPUT: <outputFile> #> \tFile destination #>  #>  #>  if (has_qgis()) qgis_description(\"native:filedownloader\") #>                                native:filedownloader  #> \"This algorithm downloads a URL on the file system.\"  if (has_qgis()) qgis_arguments(\"native:filedownloader\") #> # A tibble: 4 × 6 #>   name   description      qgis_type       default_value available_values accep…¹ #>   <chr>  <chr>            <chr>           <list>        <list>           <list>  #> 1 URL    URL              string          <NULL>        <NULL>           <chr>   #> 2 METHOD Method           enum            <int [1]>     <chr [2]>        <chr>   #> 3 DATA   Data             string          <NULL>        <NULL>           <chr>   #> 4 OUTPUT File destination fileDestination <NULL>        <NULL>           <chr>   #> # … with abbreviated variable name ¹​acceptable_values"},{"path":"/reference/qgis_tmp_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage temporary files — qgis_tmp_file","title":"Manage temporary files — qgis_tmp_file","text":"functions create temporary files can used calls qgis_run_algorithm() elsewhere. files created special temporary directory (qgis_tmp_base()) periodically cleaned using qgis_tmp_clean(). can set preferred vector /raster file extension using options(qgisprocess.tmp_vector_ext = \"...\") /options(qgisprocess.tmp_raster_ext = \"...\"), respectively.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_file(ext)  is_qgis_tmp_file(x)  qgis_tmp_folder()  qgis_tmp_vector(ext = getOption(\"qgisprocess.tmp_vector_ext\", \".gpkg\"))  qgis_tmp_raster(ext = getOption(\"qgisprocess.tmp_raster_ext\", \".tif\"))  qgis_tmp_base()  qgis_tmp_clean()"},{"path":"/reference/qgis_tmp_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage temporary files — qgis_tmp_file","text":"ext file extension used. x character vector file names.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage temporary files — qgis_tmp_file","text":"character vector indicating location (yet created) temporary file.","code":""},{"path":"/reference/qgis_tmp_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage temporary files — qgis_tmp_file","text":"","code":"qgis_tmp_base() #> [1] \"/tmp/RtmpuvvXHT/file2aee5071e4e\" qgis_tmp_file(\".csv\") #> [1] \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee72da4fbe.csv\" qgis_tmp_vector() #> [1] \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee6619b3a1.gpkg\" qgis_tmp_raster() #> [1] \"/tmp/RtmpuvvXHT/file2aee5071e4e/file2aee4cbd9187.tif\""},{"path":"/reference/qgisprocess-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qgisprocess: Use 'QGIS' Processing Algorithms — qgisprocess-package","title":"qgisprocess: Use 'QGIS' Processing Algorithms — qgisprocess-package","text":"Provides seamless access 'QGIS' https://qgis.org/ processing toolbox using 'qgis_process' command-line utility.","code":""},{"path":[]},{"path":"/reference/qgisprocess-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qgisprocess: Use 'QGIS' Processing Algorithms — qgisprocess-package","text":"Maintainer: Dewey Dunnington dewey@fishandwhistle.net (ORCID) Authors: Floris Vanderhaeghe floris.vanderhaeghe@inbo.(ORCID) Jan Caha jan.caha@outlook.com (ORCID) contributors: Antony Barja antony.barja8@gmail.com (ORCID) [contributor] Robin Lovelace rob00x@gmail.com (ORCID) [contributor] Jakub Nowosad nowosad.jakub@gmail.com (ORCID) [contributor]","code":""}]
